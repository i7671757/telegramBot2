#!/usr/bin/env ts-node

import { analytics } from '../src/utils/analytics';
import { errorHandler } from '../src/utils/errorHandler';
import { apiCache, userCache, staticCache } from '../src/utils/cache';
import fs from 'fs';
import path from 'path';

interface ProjectAnalysis {
  timestamp: string;
  analytics: any;
  errors: any;
  cache: any;
  files: any;
  recommendations: string[];
}

class ProjectAnalyzer {
  
  async generateReport(): Promise<ProjectAnalysis> {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    const analysis: ProjectAnalysis = {
      timestamp: new Date().toISOString(),
      analytics: await this.getAnalyticsData(),
      errors: this.getErrorMetrics(),
      cache: this.getCacheStats(),
      files: await this.getFileStats(),
      recommendations: this.generateRecommendations()
    };

    return analysis;
  }

  private async getAnalyticsData() {
    try {
      const metrics = await analytics.getMetrics(30);
      const topEvents = await analytics.getTopEvents(7);
      const hourlyStats = await analytics.getHourlyStats(7);

      return {
        metrics,
        topEvents,
        hourlyStats,
        status: 'success'
      };
    } catch (error) {
      return {
        status: 'error',
        message: 'Analytics not available'
      };
    }
  }

  private getErrorMetrics() {
    try {
      return {
        metrics: errorHandler.getMetrics(),
        status: 'success'
      };
    } catch (error) {
      return {
        status: 'error',
        message: 'Error metrics not available'
      };
    }
  }

  private getCacheStats() {
    return {
      api: apiCache.getStats(),
      user: userCache.getStats(),
      static: staticCache.getStats()
    };
  }

  private async getFileStats() {
    const projectRoot = process.cwd();
    const stats = {
      totalFiles: 0,
      totalSize: 0,
      typeBreakdown: {} as Record<string, number>,
      largestFiles: [] as Array<{ file: string; size: number }>
    };

    const scanDirectory = (dir: string) => {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          if (!file.startsWith('.') && file !== 'node_modules') {
            scanDirectory(filePath);
          }
        } else {
          stats.totalFiles++;
          stats.totalSize += stat.size;
          
          const ext = path.extname(file);
          stats.typeBreakdown[ext] = (stats.typeBreakdown[ext] || 0) + 1;
          
          stats.largestFiles.push({
            file: path.relative(projectRoot, filePath),
            size: stat.size
          });
        }
      }
    };

    scanDirectory(projectRoot);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø 10
    stats.largestFiles = stats.largestFiles
      .sort((a, b) => b.size - a.size)
      .slice(0, 10);

    return stats;
  }

  private generateRecommendations(): string[] {
    const recommendations: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if (!fs.existsSync('.env')) {
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
    try {
      const sessionsSize = fs.statSync('sessions.json').size;
      if (sessionsSize > 1024 * 1024) { // 1MB
        recommendations.push('–§–∞–π–ª sessions.json —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é');
      }
    } catch (error) {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤
    if (!fs.existsSync('logs')) {
      recommendations.push('–ü–∞–ø–∫–∞ logs –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
    try {
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      
      if (!packageJson.scripts?.dev) {
        recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–ø—Ç dev –≤ package.json');
      }
      
      if (!packageJson.scripts?.build) {
        recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–ø—Ç build –≤ package.json');
      }
    } catch (error) {
      recommendations.push('–ü—Ä–æ–±–ª–µ–º–∞ —Å —á—Ç–µ–Ω–∏–µ–º package.json');
    }

    return recommendations;
  }

  async saveReport(analysis: ProjectAnalysis): Promise<void> {
    const reportsDir = 'reports';
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir);
    }

    const filename = `analysis-${new Date().toISOString().split('T')[0]}.json`;
    const filepath = path.join(reportsDir, filename);
    
    fs.writeFileSync(filepath, JSON.stringify(analysis, null, 2));
    console.log(`üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
  }

  printSummary(analysis: ProjectAnalysis): void {
    console.log('\nüìä –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–û–ï–ö–¢–ê\n');
    console.log('=' .repeat(50));
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    if (analysis.analytics.status === 'success') {
      const metrics = analysis.analytics.metrics;
      console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${metrics.totalUsers}`);
      console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–µ—Å—è—Ü): ${metrics.activeUsers.monthly}`);
      console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${metrics.orders.total}`);
      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${metrics.orders.completed}`);
      console.log(`üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${metrics.orders.averageValue.toFixed(0)} —Å—É–º`);
      console.log(`üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${metrics.conversionRate.toFixed(1)}%`);
    } else {
      console.log('‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    console.log('\n' + '-'.repeat(50));

    // –û—à–∏–±–∫–∏
    if (analysis.errors.status === 'success') {
      const errorMetrics = analysis.errors.metrics;
      console.log(`üö® –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${errorMetrics.totalErrors}`);
      console.log(`üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${(errorMetrics.totalErrors / 1000 * 100).toFixed(2)}%`);
    } else {
      console.log('‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    console.log('\n' + '-'.repeat(50));

    // –ö—ç—à
    console.log('üíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê:');
    console.log(`API –∫—ç—à: ${analysis.cache.api.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫—ç—à: ${analysis.cache.user.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    console.log(`–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à: ${analysis.cache.static.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);

    console.log('\n' + '-'.repeat(50));

    // –§–∞–π–ª—ã
    console.log('üìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í:');
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${analysis.files.totalFiles}`);
    console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(analysis.files.totalSize / 1024 / 1024).toFixed(2)} MB`);
    
    console.log('\n–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:');
    Object.entries(analysis.files.typeBreakdown)
      .sort(([,a], [,b]) => (b as number) - (a as number))
      .slice(0, 5)
      .forEach(([ext, count]) => {
        console.log(`  ${ext || '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'}: ${count}`);
      });

    console.log('\n' + '-'.repeat(50));

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.recommendations.length > 0) {
      console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      analysis.recommendations.forEach((rec, index) => {
        console.log(`${index + 1}. ${rec}`);
      });
    } else {
      console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç - –ø—Ä–æ–µ–∫—Ç –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
    }

    console.log('\n' + '='.repeat(50));
    console.log(`üïê –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${new Date().toLocaleString('ru-RU')}`);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  const analyzer = new ProjectAnalyzer();
  
  try {
    const analysis = await analyzer.generateReport();
    analyzer.printSummary(analysis);
    await analyzer.saveReport(analysis);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
} 