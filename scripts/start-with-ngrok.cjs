const NgrokWebhookUpdater = require('./ngrok-webhook-updater.cjs');
const { spawn } = require('child_process');
const path = require('path');

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º ngrok webhook
 */
class BotWithNgrok {
  constructor(options = {}) {
    this.port = options.port || 3000;
    this.botScript = options.botScript || 'index.ts';
    this.ngrokUpdater = new NgrokWebhookUpdater({ port: this.port });
    this.botProcess = null;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok –∏ –∑–∞—Ç–µ–º –±–æ—Ç
   */
  async start() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º webhook...\n');

      // 1. –ó–∞–ø—É—Å–∫–∞–µ–º ngrok –∏ –æ–±–Ω–æ–≤–ª—è–µ–º .env
      console.log('üì° –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ngrok —Ç—É–Ω–Ω–µ–ª—è...');
      const webhookUrl = await this.ngrokUpdater.start();
      
      console.log('\n‚úÖ Ngrok –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: ${webhookUrl}`);
      console.log('üìù –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º WEBHOOK_URL\n');

      // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
      console.log('ü§ñ –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      await this.startBot();

      console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üì± –í–∞—à Telegram –±–æ—Ç —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ webhook');
      console.log('üîÑ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ\n');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error);
      await this.cleanup();
      process.exit(1);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å
   */
  async startBot() {
    return new Promise((resolve, reject) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
      const isTypeScript = this.botScript.endsWith('.ts');
      const command = isTypeScript ? 'bun' : 'node';
      const args = isTypeScript ? ['run', this.botScript] : [this.botScript];

      console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${command} ${args.join(' ')}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å
      this.botProcess = spawn(command, args, {
        stdio: 'inherit',
        cwd: process.cwd()
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞
      this.botProcess.on('spawn', () => {
        console.log('   ‚úÖ –ë–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω');
        resolve();
      });

      this.botProcess.on('error', (error) => {
        console.error('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        reject(error);
      });

      this.botProcess.on('exit', (code, signal) => {
        if (code !== 0) {
          console.log(`   ‚ö†Ô∏è  –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal}`);
        } else {
          console.log('   ‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }
      });
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å
    if (this.botProcess && !this.botProcess.killed) {
      console.log('   üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
      this.botProcess.kill('SIGTERM');
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      await new Promise((resolve) => {
        this.botProcess.on('exit', resolve);
        setTimeout(() => {
          if (!this.botProcess.killed) {
            this.botProcess.kill('SIGKILL');
          }
          resolve();
        }, 5000);
      });
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ngrok
    await this.ngrokUpdater.stop();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π webhook URL
   */
  getWebhookUrl() {
    return this.ngrokUpdater.getUrl();
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const botWithNgrok = new BotWithNgrok({
    port: process.env.PORT || 3000,
    botScript: process.argv[2] || 'index.ts'
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
  botWithNgrok.start().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const handleShutdown = async (signal) => {
    console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    await botWithNgrok.cleanup();
    process.exit(0);
  };

  process.on('SIGINT', () => handleShutdown('SIGINT'));
  process.on('SIGTERM', () => handleShutdown('SIGTERM'));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('unhandledRejection', async (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    await botWithNgrok.cleanup();
    process.exit(1);
  });

  process.on('uncaughtException', async (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    await botWithNgrok.cleanup();
    process.exit(1);
  });
}

module.exports = BotWithNgrok; 