#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram –±–æ—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —Ç–æ–∫–µ–Ω—ã, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

class SecurityAuditor {
  constructor() {
    this.issues = [];
    this.warnings = [];
    this.recommendations = [];
    this.score = 100;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  async runAudit() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    this.checkEnvironmentVariables();
    this.checkFilePermissions();
    this.checkTokenSecurity();
    this.checkDependencies();
    this.checkConfigurationFiles();
    this.checkSecurityMiddleware();
    this.checkLoggingConfiguration();

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.generateReport();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  checkEnvironmentVariables() {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

    const requiredVars = [
      'BOT_TOKEN',
      'SESSION_SECRET',
      'JWT_SECRET'
    ];

    const recommendedVars = [
      'WEBHOOK_SECRET',
      'WEBHOOK_URL',
      'NODE_ENV',
      'RATE_LIMIT_MAX_REQUESTS',
      'ENABLE_RATE_LIMITING'
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    const envPath = path.join(process.cwd(), '.env');
    const envExamplePath = path.join(process.cwd(), 'env.example');

    if (!fs.existsSync(envPath)) {
      this.addIssue('CRITICAL', '.env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.score -= 20;
    }

    if (!fs.existsSync(envExamplePath)) {
      this.addWarning('env.example —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.score -= 5;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8');
      const envVars = this.parseEnvFile(envContent);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      for (const varName of requiredVars) {
        if (!envVars[varName]) {
          this.addIssue('HIGH', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`);
          this.score -= 15;
        } else {
          this.checkVariableSecurity(varName, envVars[varName]);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      for (const varName of recommendedVars) {
        if (!envVars[varName]) {
          this.addWarning(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: ${varName}`);
          this.score -= 2;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º NODE_ENV
      if (envVars.NODE_ENV === 'development') {
        this.addWarning('NODE_ENV —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ development —Ä–µ–∂–∏–º');
      }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
   */
  checkVariableSecurity(name, value) {
    switch (name) {
      case 'BOT_TOKEN':
        if (!this.validateBotToken(value)) {
          this.addIssue('HIGH', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN');
          this.score -= 10;
        }
        break;

      case 'SESSION_SECRET':
      case 'JWT_SECRET':
        if (value.length < 16) {
          this.addIssue('MEDIUM', `${name} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 16 —Å–∏–º–≤–æ–ª–æ–≤)`);
          this.score -= 8;
        }
        if (value === 'your_secret_here' || value === 'changeme') {
          this.addIssue('CRITICAL', `${name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
          this.score -= 20;
        }
        break;

      case 'WEBHOOK_SECRET':
        if (value && value.length < 8) {
          this.addIssue('MEDIUM', 'WEBHOOK_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
          this.score -= 5;
        }
        break;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
   */
  checkFilePermissions() {
    console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º...');

    const sensitiveFiles = [
      '.env',
      'sessions.json',
      'orders.db',
      'package.json'
    ];

    for (const file of sensitiveFiles) {
      const filePath = path.join(process.cwd(), file);
      
      if (fs.existsSync(filePath)) {
        try {
          const stats = fs.statSync(filePath);
          const mode = stats.mode & parseInt('777', 8);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          if (mode & parseInt('022', 8)) {
            this.addWarning(`–§–∞–π–ª ${file} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
            this.score -= 3;
          }
        } catch (error) {
          this.addWarning(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É ${file}`);
        }
      }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
   */
  checkTokenSecurity() {
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ
    const codeFiles = this.findCodeFiles();
    const tokenPatterns = [
      /\d{8,10}:[A-Za-z0-9_-]{35}/g, // Bot token pattern
      /sk_[a-zA-Z0-9]{24,}/g,        // API key pattern
      /[A-Za-z0-9]{32,}/g            // Generic secret pattern
    ];

    for (const file of codeFiles) {
      const content = fs.readFileSync(file, 'utf8');
      
      for (const pattern of tokenPatterns) {
        const matches = content.match(pattern);
        if (matches) {
          this.addIssue('CRITICAL', `–í–æ–∑–º–æ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ ${file}`);
          this.score -= 25;
        }
      }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  checkDependencies() {
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

    const packageJsonPath = path.join(process.cwd(), 'package.json');
    
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ security-related –ø–∞–∫–µ—Ç–æ–≤
      const securityPackages = [
        'dotenv',
        'helmet',
        'express-rate-limit',
        'validator'
      ];

      const dependencies = {
        ...packageJson.dependencies,
        ...packageJson.devDependencies
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
      const outdatedPatterns = [
        { name: 'node', version: '14', message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Node.js 16+' },
        { name: 'telegraf', version: '3', message: '–û–±–Ω–æ–≤–∏—Ç–µ Telegraf –¥–æ –≤–µ—Ä—Å–∏–∏ 4+' }
      ];

      for (const pkg of outdatedPatterns) {
        if (dependencies[pkg.name] && dependencies[pkg.name].includes(pkg.version)) {
          this.addWarning(pkg.message);
          this.score -= 5;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ security –ø–∞–∫–µ—Ç–æ–≤
      if (!dependencies.dotenv) {
        this.addRecommendation('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç dotenv –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  checkConfigurationFiles() {
    console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ security –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const securityConfigPath = path.join(process.cwd(), 'src/config/security.ts');
    if (!fs.existsSync(securityConfigPath)) {
      this.addIssue('MEDIUM', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      this.score -= 10;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
    const gitignorePath = path.join(process.cwd(), '.gitignore');
    if (fs.existsSync(gitignorePath)) {
      const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
      
      const requiredIgnores = ['.env', 'sessions.json', '*.log', 'node_modules'];
      
      for (const ignore of requiredIgnores) {
        if (!gitignoreContent.includes(ignore)) {
          this.addWarning(`–î–æ–±–∞–≤—å—Ç–µ ${ignore} –≤ .gitignore`);
          this.score -= 2;
        }
      }
    } else {
      this.addIssue('MEDIUM', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .gitignore —Ñ–∞–π–ª');
      this.score -= 8;
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  checkSecurityMiddleware() {
    console.log('üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');

    const middlewareFiles = [
      'src/middlewares/rateLimitMiddleware.ts',
      'src/middlewares/inputValidation.ts',
      'src/middlewares/webhookSecurity.ts'
    ];

    for (const file of middlewareFiles) {
      const filePath = path.join(process.cwd(), file);
      if (!fs.existsSync(filePath)) {
        this.addIssue('MEDIUM', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç middleware: ${file}`);
        this.score -= 8;
      }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  checkLoggingConfiguration() {
    console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
    const logsDir = path.join(process.cwd(), 'logs');
    if (!fs.existsSync(logsDir)) {
      this.addRecommendation('–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É logs –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ .env
    const envPath = path.join(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8');
      const envVars = this.parseEnvFile(envContent);

      if (envVars.ENABLE_DEBUG_LOGGING === 'true' && envVars.NODE_ENV === 'production') {
        this.addIssue('MEDIUM', 'Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ production');
        this.score -= 5;
      }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    console.log('üìä –û–¢–ß–ï–¢ –ü–û –ê–£–î–ò–¢–£ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
    console.log('='.repeat(50));
    
    // –û–±—â–∏–π —Å—á–µ—Ç
    const grade = this.getSecurityGrade(this.score);
    console.log(`\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${this.score}/100 (${grade})`);
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (this.issues.length > 0) {
      console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      this.issues.forEach((issue, index) => {
        console.log(`${index + 1}. [${issue.level}] ${issue.message}`);
      });
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
      this.warnings.forEach((warning, index) => {
        console.log(`${index + 1}. ${warning}`);
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (this.recommendations.length > 0) {
      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      this.recommendations.forEach((rec, index) => {
        console.log(`${index + 1}. ${rec}`);
      });
    }

    // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    console.log('\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    if (this.score < 70) {
      console.log('1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
      console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã');
      console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    } else if (this.score < 90) {
      console.log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
      console.log('2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
      console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    } else {
      console.log('1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      console.log('2. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
      console.log('3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }

    console.log('\n' + '='.repeat(50));
    console.log('–ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  addIssue(level, message) {
    this.issues.push({ level, message });
  }

  addWarning(message) {
    this.warnings.push(message);
  }

  addRecommendation(message) {
    this.recommendations.push(message);
  }

  parseEnvFile(content) {
    const vars = {};
    const lines = content.split('\n');
    
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          vars[key.trim()] = valueParts.join('=').trim();
        }
      }
    }
    
    return vars;
  }

  validateBotToken(token) {
    const tokenRegex = /^\d{8,10}:[A-Za-z0-9_-]{35}$/;
    return tokenRegex.test(token);
  }

  findCodeFiles() {
    const files = [];
    const extensions = ['.ts', '.js', '.json'];
    const excludeDirs = ['node_modules', '.git', 'dist', 'build'];

    const scanDir = (dir) => {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !excludeDirs.includes(item)) {
          scanDir(fullPath);
        } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
          files.push(fullPath);
        }
      }
    };

    scanDir(process.cwd());
    return files;
  }

  getSecurityGrade(score) {
    if (score >= 95) return 'A+';
    if (score >= 90) return 'A';
    if (score >= 85) return 'B+';
    if (score >= 80) return 'B';
    if (score >= 75) return 'C+';
    if (score >= 70) return 'C';
    if (score >= 60) return 'D';
    return 'F';
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
if (require.main === module) {
  const auditor = new SecurityAuditor();
  auditor.runAudit().catch(console.error);
}

module.exports = SecurityAuditor; 