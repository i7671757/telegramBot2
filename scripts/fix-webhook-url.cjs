const fs = require('fs');
const path = require('path');

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å HTTP/HTTPS –≤ WEBHOOK_URL
 */
class WebhookUrlFixer {
  constructor() {
    this.envPath = path.resolve(process.cwd(), '.env');
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç .env —Ñ–∞–π–ª
   */
  analyzeEnvFile() {
    try {
      if (!fs.existsSync(this.envPath)) {
        console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:');
        this.showEnvTemplate();
        return null;
      }

      const envContent = fs.readFileSync(this.envPath, 'utf-8');
      const envVars = {};

      envContent.split('\n').forEach(line => {
        if (line.startsWith('#') || !line.trim()) return;
        
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length >= 0) {
          const value = valueParts.join('=').trim().replace(/^["'](.*)["']$/, '$1');
          envVars[key.trim()] = value;
        }
      });

      return envVars;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞
   */
  showEnvTemplate() {
    console.log(`
# Telegram Bot Configuration
BOT_TOKEN=your_telegram_bot_token_here

# Ngrok Configuration  
NGROK_AUTHTOKEN=your_ngrok_authtoken_here
WEBHOOK_URL=

# Server Configuration
PORT=3000
HOST=0.0.0.0
WEBHOOK_PATH=/webhook

# Session Configuration
SESSION_PATH=./sessions.json

# API Configuration
API_URL=https://api.lesailes.uz/

# Environment
NODE_ENV=development
`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å webhook URL
   */
  diagnoseWebhookIssues(envVars) {
    const issues = [];
    
    if (!envVars.BOT_TOKEN || envVars.BOT_TOKEN === 'your_telegram_bot_token_here') {
      issues.push({
        type: 'missing_bot_token',
        message: 'BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
      });
    }

    if (!envVars.NGROK_AUTHTOKEN || envVars.NGROK_AUTHTOKEN === 'your_ngrok_authtoken_here') {
      issues.push({
        type: 'missing_ngrok_token',
        message: 'NGROK_AUTHTOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
      });
    }

    if (envVars.WEBHOOK_URL) {
      if (envVars.WEBHOOK_URL.startsWith('http://')) {
        issues.push({
          type: 'http_webhook',
          message: 'WEBHOOK_URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP –≤–º–µ—Å—Ç–æ HTTPS',
          current: envVars.WEBHOOK_URL,
          fix: '–£–¥–∞–ª–∏—Ç–µ WEBHOOK_URL –∏–∑ .env - –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ngrok'
        });
      } else if (!envVars.WEBHOOK_URL.startsWith('https://')) {
        issues.push({
          type: 'invalid_webhook',
          message: 'WEBHOOK_URL –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
          current: envVars.WEBHOOK_URL,
          fix: '–£–¥–∞–ª–∏—Ç–µ WEBHOOK_URL –∏–∑ .env - –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ngrok'
        });
      }
    }

    return issues;
  }

  /**
   * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
   */
  suggestFixes(issues) {
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å webhook:\n');

    if (issues.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      return;
    }

    issues.forEach((issue, index) => {
      console.log(`${index + 1}. ‚ùå ${issue.message}`);
      
      if (issue.current) {
        console.log(`   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${issue.current}`);
      }
      
      if (issue.fix) {
        console.log(`   üí° –†–µ—à–µ–Ω–∏–µ: ${issue.fix}`);
      }
      
      console.log('');
    });

    this.showFixInstructions(issues);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
   */
  showFixInstructions(issues) {
    console.log('üõ†Ô∏è  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n');

    const hasTokenIssues = issues.some(i => i.type.includes('token'));
    const hasWebhookIssues = issues.some(i => i.type.includes('webhook'));

    if (hasTokenIssues) {
      console.log('1. üîë –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã:');
      console.log('   - –ü–æ–ª—É—á–∏—Ç–µ BOT_TOKEN –æ—Ç @BotFather –≤ Telegram');
      console.log('   - –ü–æ–ª—É—á–∏—Ç–µ NGROK_AUTHTOKEN –Ω–∞ https://dashboard.ngrok.com/get-started/your-authtoken');
      console.log('   - –û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env\n');
    }

    if (hasWebhookIssues) {
      console.log('2. üåê –ò—Å–ø—Ä–∞–≤—å—Ç–µ WEBHOOK_URL:');
      console.log('   - –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ —Å—Ç—Ä–æ–∫—É WEBHOOK_URL= –≤ .env —Ñ–∞–π–ª–µ');
      console.log('   - Ngrok –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTPS URL\n');
    }

    console.log('3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º ngrok:');
    console.log('   npm run start:ngrok');
    console.log('   # –∏–ª–∏');
    console.log('   bun run start:ngrok\n');

    console.log('4. üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç–µ webhook:');
    console.log('   npm run ngrok:update\n');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
   */
  run() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å webhook...\n');

    const envVars = this.analyzeEnvFile();
    
    if (!envVars) {
      return;
    }

    console.log('üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`   BOT_TOKEN: ${envVars.BOT_TOKEN ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   NGROK_AUTHTOKEN: ${envVars.NGROK_AUTHTOKEN ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   WEBHOOK_URL: ${envVars.WEBHOOK_URL || '(–ø—É—Å—Ç–æ)'}`);
    console.log(`   PORT: ${envVars.PORT || '3000'}`);

    const issues = this.diagnoseWebhookIssues(envVars);
    this.suggestFixes(issues);

    if (issues.length === 0) {
      console.log('\nüéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å:');
      console.log('   npm run start:ngrok');
    }
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const fixer = new WebhookUrlFixer();
  fixer.run();
}

module.exports = WebhookUrlFixer; 