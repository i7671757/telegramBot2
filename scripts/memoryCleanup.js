#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
 */

const SESSIONS_FILE = path.join(__dirname, '..', 'sessions.json');
const BACKUP_DIR = path.join(__dirname, '..', 'backups');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
const CONFIG = {
  maxSessionAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
  maxInactiveAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
  sessionSizeThreshold: 100 * 1024, // 100KB
  maxProductQuantities: 50,
  maxCartItems: 20
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 */
function createBackup() {
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }

  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupFile = path.join(BACKUP_DIR, `sessions_backup_${timestamp}.json`);
  
  if (fs.existsSync(SESSIONS_FILE)) {
    fs.copyFileSync(SESSIONS_FILE, backupFile);
    console.log(`‚úÖ Backup created: ${backupFile}`);
    return backupFile;
  }
  
  return null;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function getLastActivity(session) {
  const timestamps = [];
  
  if (session.cart?.updatedAt) {
    timestamps.push(new Date(session.cart.updatedAt).getTime());
  }
  
  if (session.lastOtpSent) {
    timestamps.push(session.lastOtpSent);
  }

  return timestamps.length > 0 ? Math.max(...timestamps) : Date.now() - CONFIG.maxSessionAge;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
 */
function optimizeSession(session) {
  const originalSize = Buffer.byteLength(JSON.stringify(session), 'utf8');
  const optimized = { ...session };
  const removedFields = [];

  // –£–¥–∞–ª—è–µ–º –±–æ–ª—å—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  if (optimized.products) {
    delete optimized.products;
    removedFields.push('products');
  }

  // –£–ø—Ä–æ—â–∞–µ–º selectedProduct
  if (optimized.selectedProduct) {
    const product = optimized.selectedProduct;
    optimized.selectedProduct = {
      id: product.id,
      name: product.custom_name || product.attribute_data?.name?.chopar?.ru,
      price: product.price
    };
    removedFields.push('selectedProduct.details');
  }

  // –£–ø—Ä–æ—â–∞–µ–º selectedCategory
  if (optimized.selectedCategory) {
    const category = optimized.selectedCategory;
    optimized.selectedCategory = {
      id: category.id,
      name: category.attribute_data?.name?.chopar?.ru,
      icon: category.icon
    };
    removedFields.push('selectedCategory.details');
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º productQuantities
  if (optimized.productQuantities) {
    const quantities = optimized.productQuantities;
    const quantityCount = Object.keys(quantities).length;
    if (quantityCount > CONFIG.maxProductQuantities) {
      const entries = Object.entries(quantities);
      const recent = entries.slice(-20);
      optimized.productQuantities = Object.fromEntries(recent);
      removedFields.push('productQuantities.old');
    }
  }

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
  const temporaryFields = [
    'expectingTimeSlotSelection',
    'expectingAdditionalPhone', 
    'expectingCutleryChoice',
    'expectingOrderConfirmation',
    'step',
    'previousScene',
    '__scenes'
  ];

  temporaryFields.forEach(field => {
    if (optimized[field] !== undefined) {
      delete optimized[field];
      removedFields.push(field);
    }
  });

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
  if (optimized.cart?.items) {
    if (optimized.cart.items.length > CONFIG.maxCartItems) {
      optimized.cart.items = optimized.cart.items.slice(-CONFIG.maxCartItems);
      removedFields.push('cart.oldItems');
    }
    
    optimized.cart.items = optimized.cart.items.map(item => ({
      id: item.id,
      name: item.name,
      price: item.price,
      quantity: item.quantity
    }));
  }

  const optimizedSize = Buffer.byteLength(JSON.stringify(optimized), 'utf8');
  const compressionRatio = ((originalSize - optimizedSize) / originalSize) * 100;

  return {
    session: optimized,
    originalSize,
    optimizedSize,
    compressionRatio,
    removedFields
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π
 */
function analyzeSessions(sessions) {
  const stats = {
    total: sessions.length,
    totalSize: 0,
    largeSessionsCount: 0,
    oldSessionsCount: 0,
    inactiveSessionsCount: 0,
    averageSize: 0,
    largestSize: 0
  };

  const now = Date.now();

  sessions.forEach(sessionData => {
    const sessionSize = Buffer.byteLength(JSON.stringify(sessionData.data), 'utf8');
    stats.totalSize += sessionSize;
    stats.largestSize = Math.max(stats.largestSize, sessionSize);

    if (sessionSize > CONFIG.sessionSizeThreshold) {
      stats.largeSessionsCount++;
    }

    const lastActivity = getLastActivity(sessionData.data);
    const sessionAge = now - lastActivity;
    const inactiveTime = now - lastActivity;

    if (sessionAge > CONFIG.maxSessionAge) {
      stats.oldSessionsCount++;
    }

    if (inactiveTime > CONFIG.maxInactiveAge) {
      stats.inactiveSessionsCount++;
    }
  });

  stats.averageSize = stats.total > 0 ? stats.totalSize / stats.total : 0;

  return stats;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
 */
async function performCleanup() {
  console.log('üßπ Starting memory cleanup...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–π
  if (!fs.existsSync(SESSIONS_FILE)) {
    console.log('‚ùå Sessions file not found');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  const backupFile = createBackup();
  if (!backupFile) {
    console.log('‚ùå Failed to create backup');
    return;
  }

  try {
    // –ß–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏–∏
    const sessionsData = JSON.parse(fs.readFileSync(SESSIONS_FILE, 'utf8'));
    const sessions = sessionsData.sessions || [];

    console.log(`üìä Initial analysis:`);
    const initialStats = analyzeSessions(sessions);
    console.log(`   Total sessions: ${initialStats.total}`);
    console.log(`   Total size: ${(initialStats.totalSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Average size: ${(initialStats.averageSize / 1024).toFixed(2)} KB`);
    console.log(`   Large sessions: ${initialStats.largeSessionsCount}`);
    console.log(`   Old sessions: ${initialStats.oldSessionsCount}`);
    console.log(`   Inactive sessions: ${initialStats.inactiveSessionsCount}\n`);

    const now = Date.now();
    const cleanedSessions = [];
    let optimizedCount = 0;
    let removedCount = 0;
    let totalMemorySaved = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    for (const sessionData of sessions) {
      const lastActivity = getLastActivity(sessionData.data);
      const sessionAge = now - lastActivity;
      const inactiveTime = now - lastActivity;

      // –£–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
      if (sessionAge > CONFIG.maxSessionAge) {
        removedCount++;
        console.log(`üóëÔ∏è  Removed old session: ${sessionData.id} (age: ${Math.floor(sessionAge / (24 * 60 * 60 * 1000))} days)`);
        continue;
      }

      // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      if (inactiveTime > CONFIG.maxInactiveAge) {
        removedCount++;
        console.log(`üóëÔ∏è  Removed inactive session: ${sessionData.id} (inactive: ${Math.floor(inactiveTime / (60 * 60 * 1000))} hours)`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ—Å—Å–∏–∏
      const sessionSize = Buffer.byteLength(JSON.stringify(sessionData.data), 'utf8');
      
      if (sessionSize > CONFIG.sessionSizeThreshold) {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à—É—é —Å–µ—Å—Å–∏—é
        const optimization = optimizeSession(sessionData.data);
        
        if (optimization.compressionRatio > 10) {
          cleanedSessions.push({
            id: sessionData.id,
            data: optimization.session
          });
          
          optimizedCount++;
          totalMemorySaved += optimization.originalSize - optimization.optimizedSize;
          
          console.log(`üîß Optimized session: ${sessionData.id}`);
          console.log(`   Size: ${(optimization.originalSize / 1024).toFixed(2)} KB -> ${(optimization.optimizedSize / 1024).toFixed(2)} KB`);
          console.log(`   Compression: ${optimization.compressionRatio.toFixed(2)}%`);
          console.log(`   Removed: ${optimization.removedFields.join(', ')}`);
        } else {
          cleanedSessions.push(sessionData);
        }
      } else {
        cleanedSessions.push(sessionData);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const cleanedData = {
      ...sessionsData,
      sessions: cleanedSessions
    };

    fs.writeFileSync(SESSIONS_FILE, JSON.stringify(cleanedData, null, 2));

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\n‚úÖ Cleanup completed!`);
    console.log(`üìà Results:`);
    console.log(`   Sessions removed: ${removedCount}`);
    console.log(`   Sessions optimized: ${optimizedCount}`);
    console.log(`   Memory saved: ${(totalMemorySaved / 1024 / 1024).toFixed(2)} MB`);
    
    const finalStats = analyzeSessions(cleanedSessions);
    console.log(`   Final sessions count: ${finalStats.total}`);
    console.log(`   Final total size: ${(finalStats.totalSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Size reduction: ${(((initialStats.totalSize - finalStats.totalSize) / initialStats.totalSize) * 100).toFixed(2)}%`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (finalStats.largeSessionsCount === 0 && finalStats.oldSessionsCount === 0) {
      console.log(`\nüéâ All sessions are now optimized!`);
    } else {
      console.log(`\n‚ö†Ô∏è  Still have ${finalStats.largeSessionsCount} large sessions and ${finalStats.oldSessionsCount} old sessions`);
    }

  } catch (error) {
    console.error('‚ùå Error during cleanup:', error);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if (backupFile && fs.existsSync(backupFile)) {
      console.log('üîÑ Restoring from backup...');
      fs.copyFileSync(backupFile, SESSIONS_FILE);
      console.log('‚úÖ Backup restored');
    }
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
 */
function analyzeOnly() {
  console.log('üìä Analyzing sessions...\n');

  if (!fs.existsSync(SESSIONS_FILE)) {
    console.log('‚ùå Sessions file not found');
    return;
  }

  try {
    const sessionsData = JSON.parse(fs.readFileSync(SESSIONS_FILE, 'utf8'));
    const sessions = sessionsData.sessions || [];

    const stats = analyzeSessions(sessions);
    
    console.log(`üìà Session Statistics:`);
    console.log(`   Total sessions: ${stats.total}`);
    console.log(`   Total memory usage: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Average session size: ${(stats.averageSize / 1024).toFixed(2)} KB`);
    console.log(`   Largest session size: ${(stats.largestSize / 1024).toFixed(2)} KB`);
    console.log(`   Large sessions (>${(CONFIG.sessionSizeThreshold / 1024).toFixed(0)}KB): ${stats.largeSessionsCount}`);
    console.log(`   Old sessions (>7 days): ${stats.oldSessionsCount}`);
    console.log(`   Inactive sessions (>24h): ${stats.inactiveSessionsCount}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° Recommendations:`);
    if (stats.largeSessionsCount > 0) {
      console.log(`   - Optimize ${stats.largeSessionsCount} large sessions`);
    }
    if (stats.oldSessionsCount > 0) {
      console.log(`   - Remove ${stats.oldSessionsCount} old sessions`);
    }
    if (stats.inactiveSessionsCount > 0) {
      console.log(`   - Remove ${stats.inactiveSessionsCount} inactive sessions`);
    }
    
    const potentialSavings = (stats.largeSessionsCount * CONFIG.sessionSizeThreshold * 0.7) + 
                           (stats.oldSessionsCount * stats.averageSize) + 
                           (stats.inactiveSessionsCount * stats.averageSize);
    
    if (potentialSavings > 0) {
      console.log(`   - Potential memory savings: ${(potentialSavings / 1024 / 1024).toFixed(2)} MB`);
    }

  } catch (error) {
    console.error('‚ùå Error during analysis:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'analyze':
    analyzeOnly();
    break;
  case 'cleanup':
  default:
    performCleanup();
    break;
} 