const fs = require('fs');
const path = require('path');

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ sessions.json
 * –£–¥–∞–ª—è–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∂–∏–º–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */
class SessionsOptimizer {
  constructor(inputFile = 'sessions.json', outputFile = 'sessions_optimized.json') {
    this.inputFile = inputFile;
    this.outputFile = outputFile;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç null –∏ undefined –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
   */
  removeNullValues(obj) {
    if (Array.isArray(obj)) {
      return obj.map(item => this.removeNullValues(item));
    }
    
    if (obj !== null && typeof obj === 'object') {
      const cleaned = {};
      for (const [key, value] of Object.entries(obj)) {
        if (value !== null && value !== undefined && value !== '') {
          cleaned[key] = this.removeNullValues(value);
        }
      }
      return cleaned;
    }
    
    return obj;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  optimizeProduct(product) {
    const optimized = {
      id: product.id,
      name: this.extractMultiLangText(product.attribute_data?.name?.chopar),
      description: this.extractMultiLangText(product.attribute_data?.description?.chopar, true),
      price: parseFloat(product.price),
      category_id: product.category_id,
      image: product.image,
      sort: product.sort
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –±–æ–ª—å—à–µ 0
    if (product.weight && product.weight > 0) {
      optimized.weight = product.weight;
    }

    return this.removeNullValues(optimized);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  extractMultiLangText(textObj, isDescription = false) {
    if (!textObj) return null;
    
    const result = {};
    for (const [lang, text] of Object.entries(textObj)) {
      if (text && text.trim()) {
        // –î–ª—è –æ–ø–∏—Å–∞–Ω–∏–π —É–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        result[lang] = isDescription ? text.replace(/<[^>]*>/g, '').trim() : text.trim();
      }
    }
    
    return Object.keys(result).length > 0 ? result : null;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   */
  optimizeCategory(category) {
    if (!category) return null;
    
    return this.removeNullValues({
      id: category.id,
      name: this.extractMultiLangText(category.attribute_data?.name?.chopar),
      order: category.order,
      icon: category.icon
    });
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
   */
  optimizeSelectedProduct(product) {
    if (!product) return null;
    
    return this.removeNullValues({
      id: product.id,
      name: this.extractMultiLangText(product.attribute_data?.name?.chopar),
      price: parseFloat(product.price),
      weight: product.weight > 0 ? product.weight : undefined,
      image: product.image
    });
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä–∑–∏–Ω—É
   */
  optimizeCart(cart) {
    if (!cart) return null;
    
    return {
      items: cart.items?.map(item => ({
        id: item.id,
        name: item.name,
        price: typeof item.price === 'string' ? parseFloat(item.price) : item.price,
        quantity: item.quantity
      })) || [],
      total: cart.total,
      updatedAt: cart.updatedAt
    };
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   */
  optimizeSessionData(data) {
    const optimized = {
      __scenes: data.__scenes,
      language: data.language,
      registered: data.registered,
      phone: data.phone,
      currentCity: data.currentCity,
      __language_code: data.__language_code,
      selectedCity: data.selectedCity,
      isAuthenticated: data.isAuthenticated
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (data.address) optimized.address = data.address;
    if (data.coordinates) optimized.coordinates = data.coordinates;
    if (data.previousScene) optimized.previousScene = data.previousScene;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    if (data.products && Array.isArray(data.products)) {
      optimized.products = data.products.map(product => this.optimizeProduct(product));
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    if (data.selectedProduct) {
      optimized.selectedProduct = this.optimizeSelectedProduct(data.selectedProduct);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
    if (data.productQuantities) optimized.productQuantities = data.productQuantities;
    if (data.cart) optimized.cart = this.optimizeCart(data.cart);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫–∞–∑–∞
    const orderFields = [
      'expectingTimeSlotSelection', 'selectedPickupTime', 'selectedPaymentMethod',
      'expectingAdditionalPhone', 'additionalPhone', 'expectingCutleryChoice',
      'includeCutlery', 'expectingOrderConfirmation', 'ratings', 'selectedBranch',
      'deliveryType', 'step'
    ];
    
    orderFields.forEach(field => {
      if (data[field] !== undefined) {
        optimized[field] = data[field];
      }
    });

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (data.selectedCategory) {
      optimized.selectedCategory = this.optimizeCategory(data.selectedCategory);
    }

    return this.removeNullValues(optimized);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  optimize() {
    try {
      console.log(`üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${this.inputFile}`);
      const data = JSON.parse(fs.readFileSync(this.inputFile, 'utf8'));
      
      const originalSize = fs.statSync(this.inputFile).size;
      console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(originalSize / 1024).toFixed(2)} KB`);

      const optimized = {
        language: data.language,
        registered: data.registered,
        phone: data.phone,
        currentCity: data.currentCity,
        selectedCity: data.selectedCity,
        sessions: data.sessions.map(session => ({
          id: session.id,
          data: this.optimizeSessionData(session.data)
        }))
      };

      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
      const finalOptimized = this.removeNullValues(optimized);

      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: ${this.outputFile}`);
      fs.writeFileSync(this.outputFile, JSON.stringify(finalOptimized, null, 2));
      
      const newSize = fs.statSync(this.outputFile).size;
      const reduction = ((originalSize - newSize) / originalSize * 100).toFixed(2);
      
      console.log(`üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${(newSize / 1024).toFixed(2)} KB`);
      console.log(`üéØ –°–∂–∞—Ç–∏–µ: ${reduction}%`);
      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);

      return {
        originalSize,
        newSize,
        reduction: parseFloat(reduction)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
   */
  createBackup() {
    const backupFile = `${this.inputFile}.backup.${Date.now()}`;
    fs.copyFileSync(this.inputFile, backupFile);
    console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupFile}`);
    return backupFile;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  validate() {
    try {
      const original = JSON.parse(fs.readFileSync(this.inputFile, 'utf8'));
      const optimized = JSON.parse(fs.readFileSync(this.outputFile, 'utf8'));
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
      if (original.sessions.length !== optimized.sessions.length) {
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Å–µ—Å—Å–∏–π
      const originalIds = original.sessions.map(s => s.id).sort();
      const optimizedIds = optimized.sessions.map(s => s.id).sort();
      
      if (JSON.stringify(originalIds) !== JSON.stringify(optimizedIds)) {
        throw new Error('ID —Å–µ—Å—Å–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      }
      
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
      return false;
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const optimizer = new SessionsOptimizer();
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  optimizer.createBackup();
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
  const result = optimizer.optimize();
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º
  optimizer.validate();
  
  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  console.log(`- –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(result.originalSize / 1024).toFixed(2)} KB`);
  console.log(`- –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${(result.newSize / 1024).toFixed(2)} KB`);
  console.log(`- –≠–∫–æ–Ω–æ–º–∏—è: ${result.reduction}%`);
}

module.exports = SessionsOptimizer; 