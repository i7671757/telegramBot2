const ngrok = require('@ngrok/ngrok');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  const envPath = path.resolve(process.cwd(), '.env');
  
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf-8');
    
    envContent.split('\n').forEach(line => {
      if (line.startsWith('#') || !line.trim()) return;
      
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim().replace(/^["'](.*)["']$/, '$1');
        process.env[key.trim()] = value;
      }
    });
    
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞');
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
loadEnvFile();

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç WEBHOOK_URL –≤ —Ñ–∞–π–ª–µ .env –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok
 */
class NgrokWebhookUpdater {
  constructor(options = {}) {
    this.port = options.port || 3000;
    this.envPath = options.envPath || path.resolve(process.cwd(), '.env');
    this.authtoken = options.authtoken || process.env.NGROK_AUTHTOKEN;
    this.listener = null;
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª .env –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç
   */
  readEnvFile() {
    try {
      if (!fs.existsSync(this.envPath)) {
        console.log('–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...');
        return {};
      }

      const envContent = fs.readFileSync(this.envPath, 'utf-8');
      const envVars = {};

      envContent.split('\n').forEach(line => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (line.startsWith('#') || !line.trim()) return;

        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').trim().replace(/^["'](.*)["']$/, '$1');
          envVars[key.trim()] = value;
        }
      });

      return envVars;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:', error);
      return {};
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª .env
   */
  writeEnvFile(envVars) {
    try {
      const envContent = Object.entries(envVars)
        .map(([key, value]) => {
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          const needsQuotes = /[\s#=]/.test(value);
          return `${key}=${needsQuotes ? `"${value}"` : value}`;
        })
        .join('\n');

      fs.writeFileSync(this.envPath, envContent + '\n', 'utf-8');
      console.log(`‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω: ${this.envPath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ .env —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç WEBHOOK_URL –≤ —Ñ–∞–π–ª–µ .env
   */
  updateWebhookUrl(newUrl) {
    const envVars = this.readEnvFile();
    const oldUrl = envVars.WEBHOOK_URL;

    envVars.WEBHOOK_URL = newUrl;
    this.writeEnvFile(envVars);

    console.log(`üîÑ WEBHOOK_URL –æ–±–Ω–æ–≤–ª–µ–Ω:`);
    console.log(`   –°—Ç–∞—Ä—ã–π: ${oldUrl || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   –ù–æ–≤—ã–π:  ${newUrl}`);

    return { oldUrl, newUrl };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª
   */
  async start() {
    try {
      console.log(`üöÄ –ó–∞–ø—É—Å–∫ ngrok –¥–ª—è –ø–æ—Ä—Ç–∞ ${this.port}...`);

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ngrok
      const ngrokConfig = {
        addr: this.port,
        authtoken_from_env: true
      };

      // –ï—Å–ª–∏ authtoken –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (this.authtoken && !process.env.NGROK_AUTHTOKEN) {
        ngrokConfig.authtoken = this.authtoken;
        delete ngrokConfig.authtoken_from_env;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
      this.listener = await ngrok.forward(ngrokConfig);
      const ngrokUrl = this.listener.url();

      console.log(`‚úÖ Ngrok —Ç—É–Ω–Ω–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${ngrokUrl}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
      this.updateWebhookUrl(ngrokUrl);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      return ngrokUrl;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok:', error);
      
      if (error.message.includes('authtoken')) {
        console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ NGROK_AUTHTOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        console.error('   –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –Ω–∞: https://dashboard.ngrok.com/get-started/your-authtoken');
      }
      
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª—å
   */
  async stop() {
    if (this.listener) {
      try {
        await this.listener.close();
        console.log('üõë Ngrok —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ ngrok —Ç—É–Ω–Ω–µ–ª—è:', error);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL —Ç—É–Ω–Ω–µ–ª—è
   */
  getUrl() {
    return this.listener ? this.listener.url() : null;
  }
}

module.exports = NgrokWebhookUpdater;

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const updater = new NgrokWebhookUpdater({
    port: process.env.PORT || 3000
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
  updater.start()
    .then(url => {
      console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à webhook URL: ${url}`);
      console.log('üìù –§–∞–π–ª .env –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    })
    .catch(error => {
      console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok:', error);
      process.exit(1);
    });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await updater.stop();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await updater.stop();
    process.exit(0);
  });
} 