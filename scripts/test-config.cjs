const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function loadEnv() {
  const envPath = path.resolve(process.cwd(), '.env');
  
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return {};
  }

  const envContent = fs.readFileSync(envPath, 'utf-8');
  const envVars = {};

  envContent.split('\n').forEach(line => {
    if (line.startsWith('#') || !line.trim()) return;
    
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length >= 0) {
      const value = valueParts.join('=').trim().replace(/^["'](.*)["']$/, '$1');
      envVars[key.trim()] = value;
    }
  });

  return envVars;
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
function testConfig() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...\n');
  
  const envVars = loadEnv();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const config = {
    botToken: envVars.BOT_TOKEN || '',
    webhookUrl: envVars.WEBHOOK_URL || '',
    webhookPath: envVars.WEBHOOK_PATH || '/webhook',
    port: parseInt(envVars.PORT || '3000'),
    host: envVars.HOST || '0.0.0.0',
    ngrokToken: envVars.NGROK_AUTHTOKEN || ''
  };

  console.log('üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   BOT_TOKEN: ${config.botToken ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`   WEBHOOK_URL: ${config.webhookUrl || '(–ø—É—Å—Ç–æ - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ngrok)'}`);
  console.log(`   WEBHOOK_PATH: ${config.webhookPath}`);
  console.log(`   PORT: ${config.port}`);
  console.log(`   HOST: ${config.host}`);
  console.log(`   NGROK_AUTHTOKEN: ${config.ngrokToken ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π webhook URL
  if (config.webhookUrl) {
    const finalWebhookUrl = `${config.webhookUrl}${config.webhookPath}`;
    console.log(`üåê –ò—Ç–æ–≥–æ–≤—ã–π webhook URL: ${finalWebhookUrl}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    if (finalWebhookUrl.startsWith('http://')) {
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Webhook –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP –≤–º–µ—Å—Ç–æ HTTPS!');
      console.log('   Telegram —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è webhook.');
    } else if (finalWebhookUrl.startsWith('https://')) {
      console.log('‚úÖ Webhook –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    }
  } else {
    console.log('üåê Webhook URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ngrok');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É
  console.log('\nüöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É:');
  
  const issues = [];
  
  if (!config.botToken) {
    issues.push('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  if (!config.ngrokToken && !config.webhookUrl) {
    issues.push('–ù–∏ NGROK_AUTHTOKEN, –Ω–∏ WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
  
  if (config.webhookUrl && config.webhookUrl.startsWith('http://')) {
    issues.push('WEBHOOK_URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP –≤–º–µ—Å—Ç–æ HTTPS');
  }

  if (issues.length === 0) {
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!');
    
    if (config.ngrokToken) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞:');
      console.log('   npm run start:ngrok');
      console.log('   # –∏–ª–∏');
      console.log('   bun run start:ngrok');
    } else {
      console.log('\nüí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:');
      console.log('   npm run start');
      console.log('   # –∏–ª–∏');
      console.log('   bun run start');
    }
  } else {
    console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
    issues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue}`);
    });
    
    console.log('\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
    console.log('   npm run webhook:fix');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testConfig();
}

module.exports = { testConfig, loadEnv }; 