#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É SessionService
 */

const SESSIONS_FILE = './sessions.json';
const BACKUP_FILE = './sessions_backup.json';

async function migrateSessions() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–π...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–π
    if (!fs.existsSync(SESSIONS_FILE)) {
      console.log('‚ùå –§–∞–π–ª sessions.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...');
    fs.copyFileSync(SESSIONS_FILE, BACKUP_FILE);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${BACKUP_FILE}`);

    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
    const sessionsData = JSON.parse(fs.readFileSync(SESSIONS_FILE, 'utf8'));
    
    if (!sessionsData.sessions || !Array.isArray(sessionsData.sessions)) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–π');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${sessionsData.sessions.length}`);

    let migratedCount = 0;
    let errorCount = 0;

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    const migratedSessions = sessionsData.sessions.map(session => {
      try {
        const migratedSession = migrateSession(session);
        migratedCount++;
        return migratedSession;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ ${session.id}:`, error.message);
        errorCount++;
        return session; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const newSessionsData = {
      sessions: migratedSessions
    };

    fs.writeFileSync(SESSIONS_FILE, JSON.stringify(newSessionsData, null, 2));

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ: ${fs.statSync(BACKUP_FILE).size} –±–∞–π—Ç`);
    console.log(`   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: ${fs.statSync(SESSIONS_FILE).size} –±–∞–π—Ç`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if (fs.existsSync(BACKUP_FILE)) {
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      fs.copyFileSync(BACKUP_FILE, SESSIONS_FILE);
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –∫ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
 */
function migrateSession(session) {
  const data = session.data;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const migratedData = {
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    language: validateLanguage(data.language),
    registered: Boolean(data.registered),
    phone: data.phone || null,
    currentCity: data.currentCity || null,
    selectedCity: validateSelectedCity(data.selectedCity),
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    isAuthenticated: Boolean(data.isAuthenticated),
    otpRetries: Number(data.otpRetries) || 0,
    lastOtpSent: data.lastOtpSent ? Number(data.lastOtpSent) : undefined,
    
    // –ö–æ—Ä–∑–∏–Ω–∞
    cart: migrateCart(data.cart),
    
    // –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    selectedBranch: validateSelectedBranch(data.selectedBranch),
    deliveryType: validateDeliveryType(data.deliveryType),
    address: data.address || undefined,
    coordinates: migrateCoordinates(data.coordinates),
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    additionalPhone: data.additionalPhone || undefined,
    includeCutlery: data.includeCutlery !== undefined ? Boolean(data.includeCutlery) : undefined,
    lastViewedOrder: data.lastViewedOrder || undefined
  };

  // –£–¥–∞–ª—è–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
  Object.keys(migratedData).forEach(key => {
    if (migratedData[key] === undefined) {
      delete migratedData[key];
    }
  });

  return {
    id: session.id,
    data: migratedData
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞
 */
function validateLanguage(language) {
  const validLanguages = ['en', 'ru', 'uz'];
  if (typeof language === 'string' && validLanguages.includes(language)) {
    return language;
  }
  return 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è selectedCity
 */
function validateSelectedCity(selectedCity) {
  if (typeof selectedCity === 'number' && selectedCity > 0) {
    return selectedCity;
  }
  if (typeof selectedCity === 'string' && !isNaN(Number(selectedCity))) {
    const num = Number(selectedCity);
    return num > 0 ? num : null;
  }
  return null;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è selectedBranch
 */
function validateSelectedBranch(selectedBranch) {
  if (typeof selectedBranch === 'number' && selectedBranch > 0) {
    return selectedBranch;
  }
  if (typeof selectedBranch === 'string' && !isNaN(Number(selectedBranch))) {
    const num = Number(selectedBranch);
    return num > 0 ? num : null;
  }
  return null;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è deliveryType
 */
function validateDeliveryType(deliveryType) {
  const validTypes = ['pickup', 'delivery'];
  if (typeof deliveryType === 'string' && validTypes.includes(deliveryType)) {
    return deliveryType;
  }
  return undefined;
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
 */
function migrateCart(cart) {
  if (!cart || typeof cart !== 'object') {
    return undefined;
  }

  const items = Array.isArray(cart.items) ? cart.items.filter(item => {
    return item && 
           typeof item.id === 'number' && 
           typeof item.name === 'string' && 
           typeof item.price === 'number' && 
           typeof item.quantity === 'number' &&
           item.id > 0 && 
           item.price >= 0 && 
           item.quantity > 0;
  }) : [];

  if (items.length === 0) {
    return undefined;
  }

  const total = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);

  return {
    items,
    total,
    updatedAt: cart.updatedAt || new Date().toISOString()
  };
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */
function migrateCoordinates(coordinates) {
  if (!coordinates || typeof coordinates !== 'object') {
    return undefined;
  }

  const lat = Number(coordinates.latitude);
  const lon = Number(coordinates.longitude);

  if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90 || lon < -180 || lon > 180) {
    return undefined;
  }

  return {
    latitude: lat,
    longitude: lon
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateSessions().catch(console.error);
}

module.exports = { migrateSessions }; 