import { logger } from '../utils/logger';
import type { AuthContext } from '../middlewares/auth';

interface LoadingState {
  isLoading: boolean;
  message?: string;
  startTime: number;
  messageId?: number;
}

interface ErrorMessage {
  type: 'error' | 'warning' | 'info' | 'success';
  title: string;
  description?: string;
  action?: string;
  icon?: string;
}

interface ProgressState {
  current: number;
  total: number;
  message: string;
  messageId?: number;
}

export class FeedbackManager {
  private static instance: FeedbackManager;
  private loadingStates: Map<string, LoadingState> = new Map();
  private progressStates: Map<string, ProgressState> = new Map();

  private constructor() {}

  static getInstance(): FeedbackManager {
    if (!FeedbackManager.instance) {
      FeedbackManager.instance = new FeedbackManager();
    }
    return FeedbackManager.instance;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getUserKey(ctx: AuthContext): string {
    return `${ctx.from?.id || 'unknown'}:${ctx.chat?.id || 'unknown'}`;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async showLoading(ctx: AuthContext, message?: string): Promise<void> {
    const userKey = this.getUserKey(ctx);
    const loadingMessage = message || ctx.i18n.t('feedback.loading') || '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';

    try {
      const sentMessage = await ctx.reply(loadingMessage);
      
      this.loadingStates.set(userKey, {
        isLoading: true,
        message: loadingMessage,
        startTime: Date.now(),
        messageId: sentMessage.message_id
      });

      logger.debug(`Loading indicator shown for user ${ctx.from?.id}`, {
        message: loadingMessage
      });
    } catch (error) {
      logger.error('Error showing loading indicator', error);
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async hideLoading(ctx: AuthContext, successMessage?: string): Promise<void> {
    const userKey = this.getUserKey(ctx);
    const loadingState = this.loadingStates.get(userKey);

    if (!loadingState || !loadingState.isLoading) {
      return;
    }

    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
      if (loadingState.messageId) {
        try {
          await ctx.deleteMessage(loadingState.messageId);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (successMessage) {
        await ctx.reply(successMessage);
      }

      const duration = Date.now() - loadingState.startTime;
      logger.debug(`Loading indicator hidden for user ${ctx.from?.id}`, {
        duration: `${duration}ms`
      });

      this.loadingStates.delete(userKey);
    } catch (error) {
      logger.error('Error hiding loading indicator', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async showError(ctx: AuthContext, error: ErrorMessage | string): Promise<void> {
    let errorMessage: ErrorMessage;

    if (typeof error === 'string') {
      errorMessage = {
        type: 'error',
        title: error,
        icon: '‚ùå'
      };
    } else {
      errorMessage = error;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
    await this.hideLoading(ctx);

    const icon = errorMessage.icon || this.getIconForType(errorMessage.type);
    let messageText = `${icon} <b>${errorMessage.title}</b>`;

    if (errorMessage.description) {
      messageText += `\n\n${errorMessage.description}`;
    }

    if (errorMessage.action) {
      messageText += `\n\nüí° <i>${errorMessage.action}</i>`;
    }

    try {
      await ctx.reply(messageText, { parse_mode: 'HTML' });
      
      logger.info(`Error message shown to user ${ctx.from?.id}`, {
        type: errorMessage.type,
        title: errorMessage.title
      });
    } catch (error) {
      logger.error('Error showing error message', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  async showSuccess(ctx: AuthContext, message: string, description?: string): Promise<void> {
    await this.hideLoading(ctx);

    const icon = '‚úÖ';
    let messageText = `${icon} <b>${message}</b>`;

    if (description) {
      messageText += `\n\n${description}`;
    }

    try {
      await ctx.reply(messageText, { parse_mode: 'HTML' });
      
      logger.info(`Success message shown to user ${ctx.from?.id}`, {
        message
      });
    } catch (error) {
      logger.error('Error showing success message', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
   */
  async showWarning(ctx: AuthContext, message: string, description?: string): Promise<void> {
    const icon = '‚ö†Ô∏è';
    let messageText = `${icon} <b>${message}</b>`;

    if (description) {
      messageText += `\n\n${description}`;
    }

    try {
      await ctx.reply(messageText, { parse_mode: 'HTML' });
      
      logger.info(`Warning message shown to user ${ctx.from?.id}`, {
        message
      });
    } catch (error) {
      logger.error('Error showing warning message', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async showInfo(ctx: AuthContext, message: string, description?: string): Promise<void> {
    const icon = '‚ÑπÔ∏è';
    let messageText = `${icon} <b>${message}</b>`;

    if (description) {
      messageText += `\n\n${description}`;
    }

    try {
      await ctx.reply(messageText, { parse_mode: 'HTML' });
      
      logger.info(`Info message shown to user ${ctx.from?.id}`, {
        message
      });
    } catch (error) {
      logger.error('Error showing info message', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
   */
  async showProgress(ctx: AuthContext, current: number, total: number, message: string): Promise<void> {
    const userKey = this.getUserKey(ctx);
    const percentage = Math.round((current / total) * 100);
    const progressBar = this.createProgressBar(percentage);
    
    const progressMessage = `${progressBar} ${percentage}%\n${message}`;

    try {
      const existingProgress = this.progressStates.get(userKey);
      
      if (existingProgress && existingProgress.messageId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
          await ctx.telegram.editMessageText(
            ctx.chat?.id,
            existingProgress.messageId,
            undefined,
            progressMessage
          );
        } catch (error) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
          const sentMessage = await ctx.reply(progressMessage);
          this.progressStates.set(userKey, {
            current,
            total,
            message,
            messageId: sentMessage.message_id
          });
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const sentMessage = await ctx.reply(progressMessage);
        this.progressStates.set(userKey, {
          current,
          total,
          message,
          messageId: sentMessage.message_id
        });
      }

      logger.debug(`Progress shown for user ${ctx.from?.id}`, {
        current,
        total,
        percentage
      });
    } catch (error) {
      logger.error('Error showing progress', error);
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
   */
  async hideProgress(ctx: AuthContext, finalMessage?: string): Promise<void> {
    const userKey = this.getUserKey(ctx);
    const progressState = this.progressStates.get(userKey);

    if (!progressState) return;

    try {
      if (progressState.messageId) {
        if (finalMessage) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
          await ctx.telegram.editMessageText(
            ctx.chat?.id,
            progressState.messageId,
            undefined,
            finalMessage
          );
        } else {
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
          try {
            await ctx.deleteMessage(progressState.messageId);
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
          }
        }
      }

      this.progressStates.delete(userKey);
      
      logger.debug(`Progress hidden for user ${ctx.from?.id}`);
    } catch (error) {
      logger.error('Error hiding progress', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   */
  private createProgressBar(percentage: number): string {
    const totalBars = 10;
    const filledBars = Math.round((percentage / 100) * totalBars);
    const emptyBars = totalBars - filledBars;
    
    return '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private getIconForType(type: string): string {
    switch (type) {
      case 'error': return '‚ùå';
      case 'warning': return '‚ö†Ô∏è';
      case 'info': return '‚ÑπÔ∏è';
      case 'success': return '‚úÖ';
      default: return '‚ÑπÔ∏è';
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É API
   */
  async showApiError(ctx: AuthContext, error: any): Promise<void> {
    let errorMessage: ErrorMessage;

    if (error.response) {
      // –û—à–∏–±–∫–∞ HTTP
      const status = error.response.status;
      const statusText = error.response.statusText;
      
      switch (status) {
        case 400:
          errorMessage = {
            type: 'error',
            title: ctx.i18n.t('errors.bad_request') || '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
            description: ctx.i18n.t('errors.check_input') || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            action: ctx.i18n.t('errors.try_again') || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
          };
          break;
        case 401:
          errorMessage = {
            type: 'error',
            title: ctx.i18n.t('errors.unauthorized') || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            description: ctx.i18n.t('errors.login_required') || '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
            action: ctx.i18n.t('errors.login_action') || '–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç'
          };
          break;
        case 404:
          errorMessage = {
            type: 'error',
            title: ctx.i18n.t('errors.not_found') || '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
            description: ctx.i18n.t('errors.resource_missing') || '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            action: ctx.i18n.t('errors.check_selection') || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä'
          };
          break;
        case 500:
          errorMessage = {
            type: 'error',
            title: ctx.i18n.t('errors.server_error') || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            description: ctx.i18n.t('errors.temporary_issue') || '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            action: ctx.i18n.t('errors.try_later') || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
          };
          break;
        default:
          errorMessage = {
            type: 'error',
            title: ctx.i18n.t('errors.network_error') || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
            description: `HTTP ${status}: ${statusText}`,
            action: ctx.i18n.t('errors.check_connection') || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'
          };
      }
    } else if (error.code === 'ECONNABORTED') {
      errorMessage = {
        type: 'error',
        title: ctx.i18n.t('errors.timeout') || '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
        description: ctx.i18n.t('errors.slow_connection') || '–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
        action: ctx.i18n.t('errors.try_again') || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
      };
    } else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      errorMessage = {
        type: 'error',
        title: ctx.i18n.t('errors.connection_failed') || '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        description: ctx.i18n.t('errors.server_unavailable') || '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        action: ctx.i18n.t('errors.check_connection') || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'
      };
    } else {
      errorMessage = {
        type: 'error',
        title: ctx.i18n.t('errors.unknown_error') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        description: error.message || ctx.i18n.t('errors.unexpected_error') || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
        action: ctx.i18n.t('errors.contact_support') || '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'
      };
    }

    await this.showError(ctx, errorMessage);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  async showValidationError(ctx: AuthContext, field: string, message: string): Promise<void> {
    const errorMessage: ErrorMessage = {
      type: 'warning',
      title: ctx.i18n.t('validation.invalid_input') || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      description: message,
      action: ctx.i18n.t('validation.correct_and_retry') || '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
      icon: '‚ö†Ô∏è'
    };

    await this.showError(ctx, errorMessage);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  isLoading(ctx: AuthContext): boolean {
    const userKey = this.getUserKey(ctx);
    const loadingState = this.loadingStates.get(userKey);
    return loadingState?.isLoading || false;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  clearUserStates(ctx: AuthContext): void {
    const userKey = this.getUserKey(ctx);
    this.loadingStates.delete(userKey);
    this.progressStates.delete(userKey);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  async showConfirmation(ctx: AuthContext, message: string, confirmText?: string, cancelText?: string): Promise<void> {
    const confirmButton = confirmText || ctx.i18n.t('confirmation.yes') || '‚úÖ –î–∞';
    const cancelButton = cancelText || ctx.i18n.t('confirmation.no') || '‚ùå –ù–µ—Ç';

    const keyboard = {
      inline_keyboard: [
        [
          { text: confirmButton, callback_data: 'confirm_yes' },
          { text: cancelButton, callback_data: 'confirm_no' }
        ]
      ]
    };

    try {
      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });
    } catch (error) {
      logger.error('Error showing confirmation', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ–º
   */
  async showNotification(ctx: AuthContext, message: string, duration: number = 3000): Promise<void> {
    try {
      const sentMessage = await ctx.reply(`üí¨ ${message}`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(async () => {
        try {
          await ctx.deleteMessage(sentMessage.message_id);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
      }, duration);
    } catch (error) {
      logger.error('Error showing notification', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const feedbackManager = FeedbackManager.getInstance(); 