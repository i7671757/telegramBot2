import { logger } from './logger';
import type { AuthContext } from '../middlewares/auth';

export interface ErrorMetrics {
  totalErrors: number;
  errorsByType: Record<string, number>;
  errorsByScene: Record<string, number>;
  lastErrors: Array<{
    timestamp: string;
    type: string;
    message: string;
    userId?: number;
    scene?: string;
  }>;
}

class ErrorHandler {
  private metrics: ErrorMetrics = {
    totalErrors: 0,
    errorsByType: {},
    errorsByScene: {},
    lastErrors: []
  };

  private adminChatId?: number;

  constructor(adminChatId?: number) {
    this.adminChatId = adminChatId;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Å—Ü–µ–Ω–∞—Ö –±–æ—Ç–∞
   */
  async handleBotError(error: any, ctx: AuthContext, scene?: string) {
    const errorType = error.constructor.name || 'UnknownError';
    const userId = ctx.from?.id;
    const username = ctx.from?.username || ctx.from?.first_name;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.error('Bot error occurred', error, {
      userId,
      username,
      scene,
      updateType: ctx.updateType
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    this.updateMetrics(errorType, scene, userId);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.notifyUser(ctx, error);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
    if (this.isCriticalError(error)) {
      await this.notifyAdmin(error, ctx, scene);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
   */
  async handleApiError(error: any, endpoint: string, method: string = 'GET') {
    logger.error(`API error: ${method} ${endpoint}`, error);
    
    this.updateMetrics('ApiError', `API:${endpoint}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async handleDatabaseError(error: any, operation: string) {
    logger.error(`Database error: ${operation}`, error);
    
    this.updateMetrics('DatabaseError', `DB:${operation}`);
  }

  private updateMetrics(errorType: string, scene?: string, userId?: number) {
    this.metrics.totalErrors++;
    
    // –ü–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
    this.metrics.errorsByType[errorType] = (this.metrics.errorsByType[errorType] || 0) + 1;
    
    // –ü–æ —Å—Ü–µ–Ω–µ
    if (scene) {
      this.metrics.errorsByScene[scene] = (this.metrics.errorsByScene[scene] || 0) + 1;
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 50)
    this.metrics.lastErrors.unshift({
      timestamp: new Date().toISOString(),
      type: errorType,
      message: errorType,
      userId,
      scene
    });

    if (this.metrics.lastErrors.length > 50) {
      this.metrics.lastErrors = this.metrics.lastErrors.slice(0, 50);
    }
  }

  private async notifyUser(ctx: AuthContext, error: any) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (error.message?.includes('session')) {
        await ctx.reply(ctx.i18n.t('error_occurred') || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      } else if (error.message?.includes('not registered')) {
        await ctx.reply(ctx.i18n.t('registration_required') || '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
      } else if (error.code === 400) {
        await ctx.reply(ctx.i18n.t('error_occurred') || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        await ctx.reply(ctx.i18n.t('error_occurred') || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.');
      }
    } catch (notificationError) {
      logger.error('Failed to notify user about error', notificationError);
    }
  }

  private async notifyAdmin(error: any, ctx: AuthContext, scene?: string) {
    if (!this.adminChatId) return;

    try {
      const message = `üö® *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*\n\n` +
        `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ctx.from?.id} (@${ctx.from?.username || 'unknown'})\n` +
        `*–°—Ü–µ–Ω–∞:* ${scene || 'unknown'}\n` +
        `*–û—à–∏–±–∫–∞:* \`${error.message}\`\n` +
        `*–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}`;

      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
      // ctx.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'Markdown' });
      
      logger.info('Admin notification sent', { adminChatId: this.adminChatId, error: error.message });
    } catch (adminNotificationError) {
      logger.error('Failed to notify admin', adminNotificationError);
    }
  }

  private isCriticalError(error: any): boolean {
    const criticalErrors = [
      'DatabaseError',
      'AuthenticationError',
      'PaymentError',
      'OrderProcessingError'
    ];

    return criticalErrors.some(criticalError => 
      error.constructor.name.includes(criticalError) || 
      error.message?.includes(criticalError.toLowerCase())
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getMetrics(): ErrorMetrics {
    return { ...this.metrics };
  }

  /**
   * –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏)
   */
  resetMetrics() {
    this.metrics = {
      totalErrors: 0,
      errorsByType: {},
      errorsByScene: {},
      lastErrors: []
    };
  }

  /**
   * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  middleware() {
    return async (ctx: AuthContext, next: () => Promise<void>) => {
      try {
        await next();
      } catch (error) {
        await this.handleBotError(error, ctx, ctx.scene?.current?.id);
      }
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const errorHandler = new ErrorHandler(
  process.env.ADMIN_CHAT_ID ? parseInt(process.env.ADMIN_CHAT_ID) : undefined
); 