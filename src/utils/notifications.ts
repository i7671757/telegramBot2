import { Telegraf } from 'telegraf';
import { logger } from './logger';
import Database from 'better-sqlite3';
import path from 'path';

interface NotificationTemplate {
  title: string;
  message: string;
  emoji: string;
}

interface OrderStatusUpdate {
  orderId: number;
  orderNumber: string;
  userId: number;
  newStatus: string;
  estimatedTime?: string;
  additionalInfo?: string;
}

export class NotificationService {
  private bot: Telegraf;
  private db: Database.Database;
  private templates: Record<string, NotificationTemplate>;

  constructor(bot: Telegraf) {
    this.bot = bot;
    this.db = new Database(path.join(process.cwd(), 'orders.db'));
    this.templates = this.initializeTemplates();
  }

  private initializeTemplates(): Record<string, NotificationTemplate> {
    return {
      'order_confirmed': {
        title: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç',
        message: '–í–∞—à –∑–∞–∫–∞–∑ #{orderNumber} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!',
        emoji: '‚úÖ'
      },
      'order_preparing': {
        title: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        message: '–í–∞—à –∑–∞–∫–∞–∑ #{orderNumber} –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimatedTime}',
        emoji: 'üë®‚Äçüç≥'
      },
      'order_ready': {
        title: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤',
        message: '–í–∞—à –∑–∞–∫–∞–∑ #{orderNumber} –≥–æ—Ç–æ–≤! –ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å.',
        emoji: 'üéâ'
      },
      'order_delivering': {
        title: '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏',
        message: '–í–∞—à –∑–∞–∫–∞–∑ #{orderNumber} –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É!',
        emoji: 'üöö'
      },
      'order_delivered': {
        title: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        message: '–í–∞—à –∑–∞–∫–∞–∑ #{orderNumber} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
        emoji: '‚úÖ'
      },
      'order_cancelled': {
        title: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        message: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #{orderNumber} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. {additionalInfo}',
        emoji: '‚ùå'
      },
      'promotion': {
        title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        message: '–£ –Ω–∞—Å –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è! {additionalInfo}',
        emoji: 'üî•'
      },
      'reminder': {
        title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        message: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑ #{orderNumber}!',
        emoji: '‚è∞'
      }
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
   */
  async sendOrderStatusUpdate(update: OrderStatusUpdate): Promise<boolean> {
    try {
      const template = this.getTemplateByStatus(update.newStatus);
      
      if (!template) {
        logger.warn(`No template found for status: ${update.newStatus}`);
        return false;
      }

      const message = this.formatMessage(template, update);
      
      await this.bot.telegram.sendMessage(
        update.userId,
        `${template.emoji} *${template.title}*\n\n${message}`,
        { parse_mode: 'Markdown' }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.updateOrderStatus(update.orderId, update.newStatus);

      logger.info('Order status notification sent', {
        userId: update.userId,
        orderNumber: update.orderNumber,
        status: update.newStatus
      });

      return true;

    } catch (error) {
      logger.error('Failed to send order status notification', error, {
        userId: update.userId,
        orderNumber: update.orderNumber
      });
      return false;
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendBulkNotification(
    userIds: number[], 
    templateKey: string, 
    data: Record<string, string>
  ): Promise<{ sent: number; failed: number }> {
    const template = this.templates[templateKey];
    
    if (!template) {
      logger.error(`Template not found: ${templateKey}`);
      return { sent: 0, failed: userIds.length };
    }

    let sent = 0;
    let failed = 0;

    for (const userId of userIds) {
      try {
        const message = this.formatMessage(template, data);
        
        await this.bot.telegram.sendMessage(
          userId,
          `${template.emoji} *${template.title}*\n\n${message}`,
          { parse_mode: 'Markdown' }
        );

        sent++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));

      } catch (error) {
        logger.error('Failed to send bulk notification', error, { userId });
        failed++;
      }
    }

    logger.info('Bulk notification completed', { 
      templateKey, 
      sent, 
      failed, 
      total: userIds.length 
    });

    return { sent, failed };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
   */
  async sendOrderReminder(orderNumber: string, userId: number): Promise<boolean> {
    try {
      const template = this.templates['reminder'];
      const message = template.message.replace('{orderNumber}', orderNumber);

      await this.bot.telegram.sendMessage(
        userId,
        `${template.emoji} *${template.title}*\n\n${message}`,
        { parse_mode: 'Markdown' }
      );

      logger.info('Order reminder sent', { userId, orderNumber });
      return true;

    } catch (error) {
      logger.error('Failed to send order reminder', error, { userId, orderNumber });
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendPromotion(
    userIds: number[], 
    promoText: string, 
    imageUrl?: string
  ): Promise<{ sent: number; failed: number }> {
    const template = this.templates['promotion'];
    let sent = 0;
    let failed = 0;

    for (const userId of userIds) {
      try {
        const message = template.message.replace('{additionalInfo}', promoText);

        if (imageUrl) {
          await this.bot.telegram.sendPhoto(
            userId,
            imageUrl,
            {
              caption: `${template.emoji} *${template.title}*\n\n${message}`,
              parse_mode: 'Markdown'
            }
          );
        } else {
          await this.bot.telegram.sendMessage(
            userId,
            `${template.emoji} *${template.title}*\n\n${message}`,
            { parse_mode: 'Markdown' }
          );
        }

        sent++;
        await new Promise(resolve => setTimeout(resolve, 150));

      } catch (error) {
        logger.error('Failed to send promotion', error, { userId });
        failed++;
      }
    }

    return { sent, failed };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  async getAllUserIds(): Promise<number[]> {
    try {
      const query = this.db.prepare('SELECT DISTINCT userId FROM orders');
      const users = query.all() as { userId: number }[];
      return users.map(user => user.userId);
    } catch (error) {
      logger.error('Failed to get user IDs', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
   */
  async getUserIdsByCity(cityId: number): Promise<number[]> {
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return this.getAllUserIds();
  }

  private getTemplateByStatus(status: string): NotificationTemplate | null {
    const statusMap: Record<string, string> = {
      '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É': 'order_confirmed',
      '–ì–æ—Ç–æ–≤–∏—Ç—Å—è': 'order_preparing',
      '–ì–æ—Ç–æ–≤': 'order_ready',
      '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è': 'order_delivering',
      '–í—ã–ø–æ–ª–Ω–µ–Ω': 'order_delivered',
      '–û—Ç–º–µ–Ω–µ–Ω': 'order_cancelled'
    };

    const templateKey = statusMap[status];
    return templateKey ? this.templates[templateKey] : null;
  }

  private formatMessage(template: NotificationTemplate, data: any): string {
    let message = template.message;

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    Object.keys(data).forEach(key => {
      const placeholder = `{${key}}`;
      if (message.includes(placeholder)) {
        message = message.replace(new RegExp(placeholder, 'g'), data[key] || '');
      }
    });

    return message;
  }

  private async updateOrderStatus(orderId: number, newStatus: string): Promise<void> {
    try {
      const query = this.db.prepare(`
        UPDATE orders 
        SET status = ?, updatedAt = CURRENT_TIMESTAMP 
        WHERE id = ?
      `);
      
      query.run(newStatus, orderId);
      
    } catch (error) {
      logger.error('Failed to update order status', error, { orderId, newStatus });
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  startReminderScheduler(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(async () => {
      await this.checkPendingReminders();
    }, 30 * 60 * 1000);

    logger.info('Reminder scheduler started');
  }

  private async checkPendingReminders(): Promise<void> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      const query = this.db.prepare(`
        SELECT orderNumber, userId 
        FROM orders 
        WHERE status = '–ì–æ—Ç–æ–≤' 
        AND datetime(updatedAt, '+30 minutes') < datetime('now')
        AND datetime(updatedAt, '+2 hours') > datetime('now')
      `);

      const pendingOrders = query.all() as { orderNumber: string; userId: number }[];

      for (const order of pendingOrders) {
        await this.sendOrderReminder(order.orderNumber, order.userId);
      }

      if (pendingOrders.length > 0) {
        logger.info(`Sent ${pendingOrders.length} order reminders`);
      }

    } catch (error) {
      logger.error('Error checking pending reminders', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
export function createNotificationService(bot: Telegraf): NotificationService {
  return new NotificationService(bot);
} 