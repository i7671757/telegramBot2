import { Composer } from 'telegraf';
import { navigationManager } from '../services/NavigationManager';
import { feedbackManager } from '../services/FeedbackManager';
import { logger } from '../utils/logger';
import type { AuthContext } from './auth';

interface UXMiddlewareOptions {
  enableNavigation?: boolean;
  enableFeedback?: boolean;
  enableBreadcrumbs?: boolean;
  enableLoadingIndicators?: boolean;
  enableErrorHandling?: boolean;
  autoHideNotifications?: boolean;
  notificationDuration?: number;
}

/**
 * Middleware –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
 */
export function createUXMiddleware(options: UXMiddlewareOptions = {}) {
  const {
    enableNavigation = true,
    enableFeedback = true,
    enableBreadcrumbs = true,
    enableLoadingIndicators = true,
    enableErrorHandling = true,
    autoHideNotifications = true,
    notificationDuration = 3000
  } = options;

  const composer = new Composer<AuthContext>();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  if (enableNavigation) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    composer.hears(/^(‚Üê –ù–∞–∑–∞–¥|‚¨ÖÔ∏è –ù–∞–∑–∞–¥|–ù–∞–∑–∞–¥|Back|Orqaga)$/i, async (ctx, next) => {
      logger.debug(`UX Middleware: Back button pressed by user ${ctx.from?.id}`);
      
      const handled = await navigationManager.handleBackButton(ctx);
      if (!handled) {
        // –ï—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
        return next();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–∞—è"
    composer.hears(/^(üè† –ì–ª–∞–≤–Ω–∞—è|üè† Home|–ì–ª–∞–≤–Ω–∞—è|Home|Bosh sahifa)$/i, async (ctx) => {
      logger.debug(`UX Middleware: Home button pressed by user ${ctx.from?.id}`);
      await ctx.scene.enter('mainMenu');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    composer.action(/^nav_/, async (ctx) => {
      const action = ctx.match[0];
      logger.debug(`UX Middleware: Inline navigation ${action} by user ${ctx.from?.id}`);
      
      await ctx.answerCbQuery();
      await navigationManager.handleInlineNavigation(ctx, action);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ breadcrumb –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    composer.action(/^nav_to_/, async (ctx) => {
      const action = ctx.match[0];
      logger.debug(`UX Middleware: Breadcrumb navigation ${action} by user ${ctx.from?.id}`);
      
      await ctx.answerCbQuery();
      await navigationManager.handleBreadcrumbNavigation(ctx, action);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
  if (enableFeedback) {
    composer.action(/^confirm_(yes|no)$/, async (ctx) => {
      const action = ctx.match[1];
      await ctx.answerCbQuery();
      
      if (action === 'yes') {
        await feedbackManager.showSuccess(ctx, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
      } else {
        await feedbackManager.showInfo(ctx, '–û—Ç–º–µ–Ω–µ–Ω–æ');
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–æ—Ç–∞
  // composer –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ catch, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

  return composer;
}

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞ breadcrumbs –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É
 */
export function createBreadcrumbMiddleware() {
  return async (ctx: AuthContext, next: () => Promise<void>) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ enter
    const originalEnter = ctx.scene.enter.bind(ctx.scene);
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞ breadcrumbs
    ctx.scene.enter = async (sceneId: string, initialState?: any, silent?: boolean) => {
      const result = await originalEnter(sceneId, initialState, silent);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º breadcrumbs –µ—Å–ª–∏ –Ω–µ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ
      if (!silent) {
        const breadcrumbs = navigationManager.getBreadcrumbs(ctx, sceneId);
        if (breadcrumbs) {
          try {
            await ctx.reply(breadcrumbs, { parse_mode: 'HTML' });
          } catch (error) {
            logger.error('Error showing breadcrumbs', error);
          }
        }
      }
      
      return result;
    };

    return next();
  };
}

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
 */
export function createLoadingMiddleware(options: {
  showForApiCalls?: boolean;
  showForSceneTransitions?: boolean;
  minimumDuration?: number;
} = {}) {
  const {
    showForApiCalls = true,
    showForSceneTransitions = false,
    minimumDuration = 500
  } = options;

  return async (ctx: AuthContext, next: () => Promise<void>) => {
    const startTime = Date.now();
    let loadingShown = false;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const loadingTimeout = setTimeout(async () => {
      if (showForApiCalls || showForSceneTransitions) {
        await feedbackManager.showLoading(ctx);
        loadingShown = true;
      }
    }, minimumDuration);

    try {
      await next();
    } finally {
      clearTimeout(loadingTimeout);
      
      if (loadingShown) {
        const duration = Date.now() - startTime;
        const successMessage = duration > 2000 ? '–ì–æ—Ç–æ–≤–æ!' : undefined;
        await feedbackManager.hideLoading(ctx, successMessage);
      }
    }
  };
}

/**
 * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
 */
export function createValidationMiddleware() {
  return async (ctx: AuthContext, next: () => Promise<void>) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    (ctx as any).validateInput = {
      phone: (phone: string) => {
        const phoneRegex = /^\+?[1-9]\d{1,14}$/;
        if (!phoneRegex.test(phone)) {
          feedbackManager.showValidationError(ctx, 'phone', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
          return false;
        }
        return true;
      },
      
      email: (email: string) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          feedbackManager.showValidationError(ctx, 'email', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
          return false;
        }
        return true;
      },
      
      name: (name: string) => {
        if (!name || name.trim().length < 2) {
          feedbackManager.showValidationError(ctx, 'name', '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
          return false;
        }
        if (name.length > 50) {
          feedbackManager.showValidationError(ctx, 'name', '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
          return false;
        }
        return true;
      },
      
      required: (value: any, fieldName: string) => {
        if (!value || (typeof value === 'string' && value.trim() === '')) {
          feedbackManager.showValidationError(ctx, fieldName, `–ü–æ–ª–µ "${fieldName}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
          return false;
        }
        return true;
      }
    };

    return next();
  };
}

/**
 * Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function createActivityMiddleware() {
  const userActivity = new Map<string, number>();

  return async (ctx: AuthContext, next: () => Promise<void>) => {
    const userId = ctx.from?.id?.toString();
    if (!userId) return next();

    const now = Date.now();
    const lastActivity = userActivity.get(userId) || 0;
    const timeSinceLastActivity = now - lastActivity;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
    if (timeSinceLastActivity > 30 * 60 * 1000 && lastActivity > 0) {
      await feedbackManager.showInfo(
        ctx,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!',
        '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å'
      );
    }

    userActivity.set(userId, now);
    return next();
  };
}

/**
 * Middleware –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–æ–º–æ—â–∏
 */
export function createHelpMiddleware() {
  return async (ctx: AuthContext, next: () => Promise<void>) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    (ctx as any).showHelp = async (helpText?: string) => {
      const currentScene = (ctx.session as any)?.currentScene;
      const sceneConfig = navigationManager.getSceneConfig(currentScene);
      
      let message = helpText;
      if (!message) {
        switch (currentScene) {
          case 'categories':
            message = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ';
            break;
          case 'products':
            message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É';
            break;
          case 'checkout':
            message = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ';
            break;
          case 'settings':
            message = '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
            break;
          default:
            message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏';
        }
      }

      await feedbackManager.showInfo(ctx, '–ü–æ–º–æ—â—å', message);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
    if (ctx.message && 'text' in ctx.message) {
      const text = ctx.message.text.toLowerCase();
      if (text === '/help' || text === '–ø–æ–º–æ—â—å' || text === 'help') {
        await (ctx as any).showHelp();
        return;
      }
    }

    return next();
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π UX middleware —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */
export const uxMiddleware = createUXMiddleware({
  enableNavigation: true,
  enableFeedback: true,
  enableBreadcrumbs: true,
  enableLoadingIndicators: true,
  enableErrorHandling: true,
  autoHideNotifications: true,
  notificationDuration: 3000
});

/**
 * –õ–µ–≥–∫–∏–π UX middleware —Ç–æ–ª—å–∫–æ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 */
export const lightUXMiddleware = createUXMiddleware({
  enableNavigation: true,
  enableFeedback: false,
  enableBreadcrumbs: false,
  enableLoadingIndicators: false,
  enableErrorHandling: true
});

/**
 * Middleware –¥–ª—è —Å—Ü–µ–Ω —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UX
 */
export const sceneUXMiddleware = Composer.compose([
  createBreadcrumbMiddleware(),
  createLoadingMiddleware(),
  createValidationMiddleware(),
  createActivityMiddleware(),
  createHelpMiddleware(),
  uxMiddleware
]); 