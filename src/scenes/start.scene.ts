import { Scenes, Markup } from 'telegraf';
import TelegrafI18n from 'telegraf-i18n';
import { setLocalizedCommands } from '../utils/commandMenu';

// Use any type for now to avoid complex type conflicts
type MyContext = Scenes.SceneContext & {
  i18n: TelegrafI18n;
  session: any;
};

// Create the start scene (renamed from language scene)
export const startScene = new Scenes.BaseScene<MyContext>('start');

startScene.enter((ctx) => {
  console.log('Entered start scene');
  const keyboard = Markup.keyboard([
    [ctx.i18n.t('changeLanguage.languages.en'), ctx.i18n.t('changeLanguage.languages.ru'), ctx.i18n.t('changeLanguage.languages.uz')]
  ]).resize();
  
  ctx.replyWithHTML('<b>Assalomu alaykum! Les Ailes yetkazib berish xizmatiga xush kelibsiz.\n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ Les Ailes.\n\nHello! Welcome to Les Ailes delivery service.</b>', keyboard);
});

// Now setup language handlers
startScene.hears('üá¨üáß English', async (ctx) => {
  console.log('English language selected');
  ctx.i18n.locale('en');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    // Set localized commands for user and globally
    await setLocalizedCommands(ctx.telegram, ctx, true);
    await setLocalizedCommands(ctx.telegram, ctx, false);
  } catch (error) {
    console.error('Error setting commands:', error);
  }
  
  // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  if (!ctx.session || !ctx.session.registered) {
    console.log('User not registered, entering register scene');
    return ctx.scene.enter('register');
  }
  console.log('User registered, entering welcome scene');
  return ctx.scene.enter('welcome');
});

startScene.hears('üá∑üá∫ –†—É—Å—Å–∫–∏–π', async (ctx) => {
  console.log('Russian language selected');
  ctx.i18n.locale('ru');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    // Set localized commands for user and globally
    await setLocalizedCommands(ctx.telegram, ctx, true);
    await setLocalizedCommands(ctx.telegram, ctx, false);
  } catch (error) {
    console.error('Error setting commands:', error);
  }
  
  // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  if (!ctx.session || !ctx.session.registered) {
    console.log('User not registered, entering register scene');
    return ctx.scene.enter('register');
  }
  console.log('User registered, entering welcome scene');
  return ctx.scene.enter('welcome');
});

startScene.hears('üá∫üáø O\'zbekcha', async (ctx) => {
  console.log('Uzbek language selected');
  ctx.i18n.locale('uz');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    // Set localized commands for user and globally
    await setLocalizedCommands(ctx.telegram, ctx, true);
    await setLocalizedCommands(ctx.telegram, ctx, false);
  } catch (error) {
    console.error('Error setting commands:', error);
  }
  
  // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  if (!ctx.session || !ctx.session.registered) {
    console.log('User not registered, entering register scene');
    return ctx.scene.enter('register');
  }
  console.log('User registered, entering welcome scene');
  return ctx.scene.enter('welcome');
});

// Handle language fallback
startScene.on('message', (ctx) => {
  const keyboard = Markup.keyboard([
    ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üáø O\'zbekcha']
  ]).resize();
  
  ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ / Please select your language using buttons below / Iltimos, quyidagi tugmalar yordamida tilni tanlang', keyboard);
}); 