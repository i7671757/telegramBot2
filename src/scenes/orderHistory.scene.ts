import { Scenes, Markup } from 'telegraf';
import type { AuthContext } from '../middlewares/auth';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../utils/logger';
import Database from 'better-sqlite3';
import path from 'path';
const { match } = require("telegraf-i18n");

interface Order {
  id: number;
  orderNumber: string;
  orderDate: string;
  orderTime: string;
  status: string;
  phoneNumber: string;
  deliveryType: string;
  deliveryTime: string;
  paymentMethod: string;
  branchName: string;
  totalAmount: number;
  createdAt: string;
  items: OrderItem[];
}

interface OrderItem {
  id: number;
  productId: number;
  name: string;
  price: number;
  quantity: number;
}

export const orderHistoryScene = new Scenes.BaseScene<AuthContext>('order_history');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(process.cwd(), 'orders.db');
const db = new Database(dbPath);

orderHistoryScene.enter(requireAuth(), async (ctx) => {
  const userId = ctx.from?.id;
  
  if (!userId) {
    await ctx.reply('–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return ctx.scene.enter('mainMenu');
  }

  try {
    logger.userAction(userId, 'view_order_history', 'order_history');
    
    const orders = await getUserOrders(userId);
    
    if (orders.length === 0) {
      const keyboard = Markup.keyboard([
        [ctx.i18n.t('mainKeyboard.startOrder')],
        [ctx.i18n.t('back') || '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
      ]).resize();

      await ctx.reply(
        'üìñ *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤*\n\n' +
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n' +
        '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üõçÔ∏è',
        { parse_mode: 'Markdown', ...keyboard }
      );
      return;
    }

    await showOrdersList(ctx, orders);
    
  } catch (error) {
    logger.error('Error in order history scene', error, { userId });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
    return ctx.scene.enter('mainMenu');
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
async function showOrdersList(ctx: AuthContext, orders: Order[]) {
  const orderButtons = orders.slice(0, 10).map(order => {
    const date = new Date(order.createdAt).toLocaleDateString('ru-RU');
    const status = getStatusEmoji(order.status);
    return [`${status} –ó–∞–∫–∞–∑ #${order.orderNumber} - ${date}`];
  });

  orderButtons.push([ctx.i18n.t('back') || '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']);

  const keyboard = Markup.keyboard(orderButtons).resize();

  let message = 'üìñ *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤*\n\n';
  
  orders.slice(0, 5).forEach(order => {
    const date = new Date(order.createdAt).toLocaleDateString('ru-RU');
    const time = new Date(order.createdAt).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    const status = getStatusEmoji(order.status);
    
    message += `${status} *–ó–∞–∫–∞–∑ #${order.orderNumber}*\n`;
    message += `üìÖ ${date} –≤ ${time}\n`;
    message += `üí∞ ${order.totalAmount.toLocaleString()} —Å—É–º\n`;
    message += `üìç ${order.branchName}\n`;
    message += `üìã ${order.status}\n\n`;
  });

  if (orders.length > 5) {
    message += `_–ò –µ—â–µ ${orders.length - 5} –∑–∞–∫–∞–∑–æ–≤..._\n\n`;
  }

  message += '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:';

  await ctx.replyWithHTML(message, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
async function showOrderDetails(ctx: AuthContext, orderNumber: string) {
  const userId = ctx.from?.id;
  
  if (!userId) return;

  try {
    const order = await getOrderByNumber(userId, orderNumber);
    
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const date = new Date(order.createdAt).toLocaleDateString('ru-RU');
    const time = new Date(order.createdAt).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    const status = getStatusEmoji(order.status);

    let message = `${status} *–ó–∞–∫–∞–∑ #${order.orderNumber}*\n\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${date} –≤ ${time}\n`;
    message += `üìã *–°—Ç–∞—Ç—É—Å:* ${order.status}\n`;
    message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phoneNumber}\n`;
    message += `üöö *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.deliveryType}\n`;
    message += `‚è∞ *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.deliveryTime}\n`;
    message += `üí≥ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ${order.paymentMethod}\n`;
    message += `üìç *–§–∏–ª–∏–∞–ª:* ${order.branchName}\n\n`;

    message += `üõçÔ∏è *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`;
    order.items.forEach((item, index) => {
      message += `${index + 1}. ${item.name}\n`;
      message += `   ${item.quantity} x ${item.price.toLocaleString()} = ${(item.quantity * item.price).toLocaleString()} —Å—É–º\n`;
    });

    message += `\nüí∞ *–ò—Ç–æ–≥–æ:* ${order.totalAmount.toLocaleString()} —Å—É–º`;

    const keyboard = Markup.keyboard([
      ['üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑'],
      ['üìñ –í—Å–µ –∑–∞–∫–∞–∑—ã', ctx.i18n.t('back') || '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]).resize();

    await ctx.replyWithHTML(message, keyboard);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞
    ctx.session.lastViewedOrder = orderNumber;

  } catch (error) {
    logger.error('Error showing order details', error, { userId, orderNumber });
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
orderHistoryScene.hears(/–ó–∞–∫–∞–∑ #(\d+)/, async (ctx) => {
  const match = ctx.message.text.match(/–ó–∞–∫–∞–∑ #(\d+)/);
  if (match) {
    const orderNumber = match[1];
    await showOrderDetails(ctx, orderNumber);
  }
});

orderHistoryScene.hears('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑', async (ctx) => {
  const orderNumber = ctx.session.lastViewedOrder;
  
  if (!orderNumber) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞');
    return;
  }

  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    const order = await getOrderByNumber(userId, orderNumber);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
    ctx.session.cart = {
      items: order.items.map(item => ({
        id: item.productId,
        name: item.name,
        price: item.price,
        quantity: item.quantity
      })),
      total: order.totalAmount
    };

    logger.userAction(userId, 'repeat_order', 'order_history', { orderNumber });

    await ctx.reply(
      `‚úÖ –¢–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ #${orderNumber} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–∞–≤.`
    );

    return ctx.scene.enter('newOrder');

  } catch (error) {
    logger.error('Error repeating order', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –∑–∞–∫–∞–∑–∞');
  }
});

orderHistoryScene.hears('üìñ –í—Å–µ –∑–∞–∫–∞–∑—ã', async (ctx) => {
  return ctx.scene.reenter();
});

orderHistoryScene.hears(match('back'), async (ctx) => {
  return ctx.scene.enter('mainMenu');
});

orderHistoryScene.on('message', async (ctx) => {
  await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function getUserOrders(userId: number): Promise<Order[]> {
  try {
    const ordersQuery = db.prepare(`
      SELECT * FROM orders 
      WHERE userId = ? 
      ORDER BY createdAt DESC 
      LIMIT 50
    `);
    
    const orders = ordersQuery.all(userId) as any[];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const ordersWithItems = await Promise.all(
      orders.map(async (order) => {
        const itemsQuery = db.prepare(`
          SELECT * FROM order_items 
          WHERE orderId = ?
        `);
        
        const items = itemsQuery.all(order.id) as OrderItem[];
        
        return {
          ...order,
          items
        };
      })
    );

    return ordersWithItems;
    
  } catch (error) {
    logger.error('Error fetching user orders', error, { userId });
    return [];
  }
}

async function getOrderByNumber(userId: number, orderNumber: string): Promise<Order | null> {
  try {
    const orderQuery = db.prepare(`
      SELECT * FROM orders 
      WHERE userId = ? AND orderNumber = ?
    `);
    
    const order = orderQuery.get(userId, orderNumber) as any;
    
    if (!order) return null;

    const itemsQuery = db.prepare(`
      SELECT * FROM order_items 
      WHERE orderId = ?
    `);
    
    const items = itemsQuery.all(order.id) as OrderItem[];
    
    return {
      ...order,
      items
    };
    
  } catch (error) {
    logger.error('Error fetching order by number', error, { userId, orderNumber });
    return null;
  }
}

function getStatusEmoji(status: string): string {
  const statusEmojis: Record<string, string> = {
    '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É': 'üü°',
    '–ì–æ—Ç–æ–≤–∏—Ç—Å—è': 'üü†',
    '–ì–æ—Ç–æ–≤': 'üü¢',
    '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è': 'üöö',
    '–í—ã–ø–æ–ª–Ω–µ–Ω': '‚úÖ',
    '–û—Ç–º–µ–Ω–µ–Ω': '‚ùå'
  };

  return statusEmojis[status] || '‚ö™';
} 