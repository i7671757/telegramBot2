import { Scenes, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import type { AuthContext } from '../middlewares/auth';
import { 
  validatePhoneNumber, 
  sendOtpCode, 
  verifyOtpCode,
  checkUserExists 
} from '../utils/auth';
import { config } from '../config';
import { sendSmsToPhone } from '../utils/sms';
import { axios, initAxiosWithCsrf } from '../utils/axios';

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const userSignScene = new Scenes.BaseScene<AuthContext>('user_sign');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –≥–æ—Ä–æ–¥–æ–≤
let cachedCities: any[] = [];

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
userSignScene.enter(async (ctx) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF –∏ axios
  await initAxiosWithCsrf();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (cachedCities.length === 0) {
    try {
      const { data } = await axios.get(`${process.env.API_URL}cities/public`);
      cachedCities = data.data || [];
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', e);
      ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }
  }

  console.log('Entering user sign scene');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
  if (!ctx.session) {
    ctx.session = {
      language: ctx.from?.language_code || 'ru',
      registered: false,
      phone: null,
      currentCity: null,
      selectedCity: null,
      isAuthenticated: false,
      otpRetries: 0
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  try {
    const userExists = await checkUserExists(ctx.from);
    if (userExists) {
      ctx.session.isAuthenticated = true;
      ctx.reply(ctx.i18n.t('auth.already_authorized'));
      return ctx.scene.enter('welcome');
    }
  } catch (error) {
    console.error('Error checking user existence:', error);
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
  const keyboard = Markup.keyboard([
    [Markup.button.contactRequest(ctx.i18n.t('auth.share_contact'))]
  ]).resize();

  const welcomeMessage = `
${ctx.i18n.t('auth.welcome_title')}

${ctx.i18n.t('auth.welcome_message')}

${ctx.i18n.t('auth.instructions')}

${ctx.i18n.t('auth.uzbek_only')}
  `;

  ctx.reply(welcomeMessage, {
    parse_mode: 'Markdown',
    ...keyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
userSignScene.on(message('contact'), async (ctx) => {
  const contact = ctx.message.contact;
  const phone = contact.phone_number;

  // –î–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const formattedPhone = phone.startsWith('+') ? phone : `+${phone}`;
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
  const validation = validatePhoneNumber(formattedPhone);
  
  if (!validation.isValid) {
    ctx.reply(`${validation.error}\n\n${ctx.i18n.t('auth.uzbek_phone_required')}`);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–µ—Å—Å–∏–∏
  ctx.session.phone = validation.formatted;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ API
  try {
    const hex = process.env.SMS_API_TOKEN || '';
    await sendSmsToPhone(
      ctx.session.phone,
      `${ctx.from?.last_name || ''} ${ctx.from?.first_name || ''}`.trim(),
      ctx.from?.id || 0,
      hex
    );
    ctx.reply('SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: ' + err);
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP
  await sendOtpToUser(ctx, validation.formatted!);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
userSignScene.on(message('text'), async (ctx) => {
  const text = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text === '/start') {
    return ctx.scene.enter('start');
  }

  if (text === '/cancel') {
    ctx.reply(ctx.i18n.t('auth.auth_cancelled'));
    return ctx.scene.leave();
  }

  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –≤ —Å–µ—Å—Å–∏–∏, –∑–Ω–∞—á–∏—Ç –æ–∂–∏–¥–∞–µ–º OTP –∫–æ–¥
  if (ctx.session.phone && ctx.session.otpToken) {
    await verifyOtp(ctx, text);
    return;
  }

  // –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const validation = validatePhoneNumber(text);
  
  if (!validation.isValid) {
    ctx.reply(`${validation.error}\n\n${ctx.i18n.t('auth.enter_phone_manual')}`);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–µ—Å—Å–∏–∏
  ctx.session.phone = validation.formatted;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP
  await sendOtpToUser(ctx, validation.formatted!);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP
async function sendOtpToUser(ctx: AuthContext, phone: string) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
    const now = Date.now();
    const retryWindow = 60000; // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    
    if (ctx.session.lastOtpSent && (now - ctx.session.lastOtpSent) < retryWindow) {
      const timeLeft = Math.ceil((retryWindow - (now - ctx.session.lastOtpSent)) / 1000);
      ctx.reply(ctx.i18n.t('auth.wait_before_resend', { seconds: timeLeft }));
      return;
    }

    ctx.reply(ctx.i18n.t('auth.sending_otp'));

    const telegramName = ctx.from?.first_name || ctx.from?.username || 'User';
    const telegramId = ctx.from?.id || 0;

    const otpResponse = await sendOtpCode(phone, telegramName, telegramId);

    if (otpResponse.success && otpResponse.token) {
      ctx.session.otpToken = otpResponse.token;
      ctx.session.otp = otpResponse.token; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      ctx.session.lastOtpSent = now;
      ctx.session.otpRetries = (ctx.session.otpRetries || 0) + 1;

      const keyboard = Markup.keyboard([
        [ctx.i18n.t('auth.resend_otp')],
        [ctx.i18n.t('auth.change_phone')],
        [ctx.i18n.t('auth.cancel')]
      ]).resize();

      ctx.reply(
        `${ctx.i18n.t('auth.otp_sent', { phone })}\n\n` +
        `${ctx.i18n.t('auth.enter_otp', { length: config.auth.otpLength })}`,
        keyboard
      );
    } else {
      ctx.reply(ctx.i18n.t('auth.otp_error', { error: otpResponse.error }));
    }
  } catch (error) {
    console.error('Error sending OTP:', error);
    ctx.reply(ctx.i18n.t('auth.otp_network_error'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä)
async function verifyOtp(ctx: AuthContext, otpCode: string) {
  const errors = {
    opt_code_is_incorrect: ctx.i18n.t('auth.otp_verification_error', { error: ctx.i18n.t('auth.otp_invalid_format') })
  };
  const otpToken = ctx.session.otp;
  try {
    let ress = await axios.post(
      `${process.env.API_URL}auth_otp`,
      {
        phone: ctx.session.phone,
        code: otpCode,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${otpToken}`,
        },
        withCredentials: true,
      }
    );

    let {
      data: { result },
    } = ress;
    result = Buffer.from(result, "base64");
    result = result.toString();
    result = JSON.parse(result);

    if (result === false) {
      return ctx.replyWithHTML(errors.opt_code_is_incorrect);
    } else {
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
      await promptCitySelection(ctx);
    }
    return;
  } catch (error) {
    return ctx.replyWithHTML(errors.opt_code_is_incorrect);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
userSignScene.action(/.*/, async (ctx) => {
  const action = ctx.match[0];
  
  switch (action) {
    case 'resend_otp':
      if (ctx.session.phone) {
        await sendOtpToUser(ctx, ctx.session.phone);
      }
      break;
      
    case 'change_phone':
      ctx.session.phone = null;
      ctx.session.otpToken = undefined;
      ctx.scene.reenter();
      break;
      
    case 'cancel_auth':
      ctx.reply(ctx.i18n.t('auth.auth_cancelled'));
      ctx.scene.leave();
      break;
  }
  
  ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥-–∫–Ω–æ–ø–æ–∫
userSignScene.hears('üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ', async (ctx) => {
  if (ctx.session.phone) {
    await sendOtpToUser(ctx, ctx.session.phone);
  } else {
    ctx.reply(ctx.i18n.t('auth.phone_not_found'));
    ctx.scene.reenter();
  }
});

userSignScene.hears('üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', (ctx) => {
  ctx.session.phone = null;
  ctx.session.otpToken = undefined;
  delete ctx.session.otpRetries;
  delete ctx.session.lastOtpSent;
  ctx.scene.reenter();
});

userSignScene.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', (ctx) => {
  ctx.reply(ctx.i18n.t('auth.auth_cancelled'));
  ctx.scene.leave();
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
userSignScene.leave((ctx) => {
  console.log('Leaving user sign scene');
});

// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî —à–∞–≥ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async function promptCitySelection(ctx: AuthContext) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const lang = ctx.session.language || 'ru';
  // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
  const cityButtons = cachedCities.map(city => {
    let cityName = city.name;
    if (lang === 'uz' && city.name_uz) cityName = city.name_uz;
    if (lang === 'en' && city.name_en) cityName = city.name_en;
    return [Markup.button.callback(cityName, `city_${city.id}`)];
  });
  await ctx.reply(ctx.i18n.t('auth.choose_city'), Markup.inlineKeyboard(cityButtons));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫—É
userSignScene.action(/^city_\d+$/, async (ctx) => {
  const cityId = Number(ctx.match[0].replace('city_', ''));
  const city = cachedCities.find(c => c.id === cityId);
  if (!city) {
    await ctx.reply('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  ctx.session.currentCity = city.id;
  ctx.session.selectedCity = city.id;
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  // const { data } = await axios.post(`${process.env.API_URL}check_tg_exists`, ctx.from);
  // if (data.result) { ... }
  await ctx.replyWithHTML(ctx.i18n.t("mainMenu"));
  // –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å getMainKeyboard(ctx) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  return ctx.scene.enter('welcome');
}); 