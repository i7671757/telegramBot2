import { Scenes, Markup } from 'telegraf';
import TelegrafI18n from 'telegraf-i18n';
import { registerSceneCommandHandlers, shouldSkipCommand } from '../utils/commandMenu';
import type { AuthContext } from '../middlewares/auth';
const { match } = require("telegraf-i18n");

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
export const settingsScene = new Scenes.BaseScene<AuthContext>('settings');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ü–µ–Ω—ã
registerSceneCommandHandlers(settingsScene, 'Settings');

// –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settingsScene.enter(async (ctx) => {
  console.log('Entering settings scene');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –º—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
  await ctx.reply(ctx.i18n.t('settings.title') || '–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  
  const keyboard = Markup.keyboard([
    [ctx.i18n.t('menu.change_name'), ctx.i18n.t('menu.change_number')],
    [ctx.i18n.t('menu.change_city'), ctx.i18n.t('menu.change_language')],
    [ctx.i18n.t('menu.branch_info'), ctx.i18n.t('menu.public_offer')],
    [ctx.i18n.t('menu.back')]
  ]).resize();

  console.log('Sending menu.title message with keyboard');
  await ctx.reply(ctx.i18n.t('menu.title'), keyboard);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
settingsScene.command('start', async (ctx) => {
  console.log('Settings scene: /start command received, restarting bot');
  
  // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
  await ctx.scene.leave();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
  await ctx.reply(ctx.i18n.t('bot_restarted') || 'Bot has been restarted. Starting from the beginning...');
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (now called start scene)
  return ctx.scene.enter('start');
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
settingsScene.command('settings', async (ctx) => {
  console.log('Settings scene: /settings command received, refreshing scene');
  
  // –¢–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å—Ü–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
  return ctx.scene.reenter();
});

settingsScene.command('order', async (ctx) => {
  await ctx.scene.enter('newOrder');
});

settingsScene.command('feedback', async (ctx) => {
  await ctx.scene.enter('callback');
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
settingsScene.hears(match('back'), async (ctx) => {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
  await ctx.scene.reenter();
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
settingsScene.on('text', async (ctx) => {
  const text = ctx.message.text;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ —Å—Ü–µ–Ω—ã
  if (shouldSkipCommand(text, 'Settings')) {
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  if (text === ctx.i18n.t('menu.change_name')) {
    await ctx.scene.enter('changeName');
  } 
  else if (text === ctx.i18n.t('menu.change_number')) {
    await ctx.scene.enter('changeNumber');
  }
  else if (text === ctx.i18n.t('menu.change_city')) {
    await ctx.scene.enter('changeCity');
  }
  else if (text === ctx.i18n.t('menu.change_language')) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    const keyboard = Markup.keyboard([
      [
        ctx.i18n.t('changeLanguage.languages.ru'),
        ctx.i18n.t('changeLanguage.languages.uz'),
        ctx.i18n.t('changeLanguage.languages.en')
      ],
      [ctx.i18n.t('back')]
    ]).resize();
    
    await ctx.reply(ctx.i18n.t('changeLanguage.select_language'), keyboard);
  }
  else if (text === ctx.i18n.t('menu.branch_info')) {
    await ctx.scene.enter('branchInfo');
  }
  else if (text === ctx.i18n.t('menu.public_offer')) {
    ctx.replyWithHTML("https://telegra.ph/Publichnaya-oferta-Chopar-Pizza-05-21");
  }
  else if (text === ctx.i18n.t('menu.back')) {
    await ctx.scene.enter('mainMenu');
  }
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
  else if (text.match(/üá∑üá∫.*–†—É—Å—Å–∫–∏–π/)) {
    if (!ctx.session) ctx.session = {
      language: 'en',
      registered: false,
      phone: null,
      currentCity: null,
      selectedCity: null
    };
    ctx.session.language = 'ru';
    ctx.i18n.locale('ru');
    await ctx.reply(ctx.i18n.t('changeLanguage.success'));
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    await ctx.scene.reenter();
  }
  else if (text.match(/üá∫üáø.*O'zbekcha/)) {
    if (!ctx.session) ctx.session = {
      language: 'en',
      registered: false,
      phone: null,
      currentCity: null,
      selectedCity: null
    };
    ctx.session.language = 'uz';
    ctx.i18n.locale('uz');
    await ctx.reply(ctx.i18n.t('changeLanguage.success'));
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    await ctx.scene.reenter();
  }
  else if (text.match(/üá¨üáß.*English/)) {
    if (!ctx.session) ctx.session = {
      language: 'en',
      registered: false,
      phone: null,
      currentCity: null,
      selectedCity: null
    };
    ctx.session.language = 'en';
    ctx.i18n.locale('en');
    await ctx.reply(ctx.i18n.t('changeLanguage.success'));
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    await ctx.scene.reenter();
  }
}); 