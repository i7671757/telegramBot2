import { Scenes, Markup } from 'telegraf';
import type { AuthContext } from '../middlewares/auth';
import { fetchCategories, getCategoryName, getCategoryImageUrl } from '../utils/categories';
import type { Category } from '../utils/categories';
import { navigationManager } from '../services/NavigationManager';
import { feedbackManager } from '../services/FeedbackManager';
import { sendWithLoading, createEnhancedKeyboard, handleErrorWithFeedback } from '../utils/uxHelpers';
import { registerSceneCommandHandlers, shouldSkipCommand } from '../utils/commandMenu';

// Temporary variable to store categories during the session lifetime
let tempCategories: Category[] = [];

const enhancedCategoriesScene = new Scenes.BaseScene<AuthContext>('enhancedCategories');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ü–µ–Ω—ã
registerSceneCommandHandlers(enhancedCategoriesScene, 'Categories');

enhancedCategoriesScene.enter(async (ctx) => {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    await navigationManager.enterScene(ctx, 'categories');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    const categories = await sendWithLoading(
      ctx,
      () => fetchCategories(),
      {
        loadingMessage: ctx.i18n.t('feedback.loading') || '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...',
        successMessage: undefined, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showProgress: true,
        progressSteps: [
          '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...',
          '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...',
          '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–Ω—é...'
        ]
      }
    );
    
    if (!categories || categories.length === 0) {
      await feedbackManager.showWarning(
        ctx,
        ctx.i18n.t('categories.empty') || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'
      );
      return;
    }
    
    // Store categories in temporary variable
    tempCategories = categories;
    
    // Get current language
    const language = ctx.i18n.locale();
    
    // Define emoji icons for categories
    const categoryIcons: Record<string, string> = {
      'Ortga': '‚úàÔ∏è',
      'Savat': 'üßä',
      'Setlar': 'üç±',
      'Tovuq': 'üçó',
      'Sneklar': 'üçü',
      'Lesterlar': 'üåÆ',
      'Burgerlar': 'üçî',
      'Longerlar/Hot-dog': 'üå≠'
    };
    
    // Prepare category buttons
    const categoryButtons = categories.map((category: Category) => {
      const categoryName = getCategoryName(category, language);
      const icon = category.icon || categoryIcons[categoryName] || 'üçΩÔ∏è';
      return {
        text: `${icon} ${categoryName}`,
        action: categoryName
      };
    });

    // Create enhanced keyboard with navigation
    const keyboard = createEnhancedKeyboard(ctx, categoryButtons, {
      showBack: true,
      showHome: false,
      columns: 2
    });
    
    // Show breadcrumbs and menu
    const breadcrumbs = navigationManager.getBreadcrumbs(ctx);
    let message = '<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:';
    
    if (breadcrumbs) {
      message = `${breadcrumbs}\n\n${message}`;
    }
    
    await ctx.replyWithHTML(message, keyboard);
    
  } catch (error) {
    await handleErrorWithFeedback(ctx, error, 'categories loading');
  }
});

// Handle back button with navigation manager
enhancedCategoriesScene.hears(/^(‚Üê –ù–∞–∑–∞–¥|‚¨ÖÔ∏è –ù–∞–∑–∞–¥|–ù–∞–∑–∞–¥|Back|Orqaga)$/i, async (ctx) => {
  const handled = await navigationManager.handleBackButton(ctx);
  if (!handled) {
    await ctx.scene.enter('startOrder');
  }
});

// Handle cart button
enhancedCategoriesScene.hears(/^üõí/, async (ctx) => {
  console.log('Cart button pressed in enhanced categories scene');
  ctx.session.previousScene = 'categories';
  await showEnhancedCart(ctx);
});

// Handle text messages (category selection)
enhancedCategoriesScene.on('text', async (ctx) => {
  const messageText = ctx.message.text;
  
  // Skip commands
  if (shouldSkipCommand(messageText, 'Categories')) {
    return;
  }

  // Handle navigation commands
  if (navigationManager.isBackCommand(ctx, messageText)) {
    await navigationManager.handleBackButton(ctx);
    return;
  }

  if (navigationManager.isHomeCommand(ctx, messageText)) {
    await ctx.scene.enter('mainMenu');
    return;
  }

  // Handle cart operations
  if (messageText === ctx.i18n.t('cart.clear') || 
      messageText.includes('üóë') ||
      messageText.includes('–û—á–∏—Å—Ç–∏—Ç—å')) {
    await handleClearCart(ctx);
    return;
  }
  
  if (messageText === ctx.i18n.t('cart_button') || 
      messageText.includes('üõí')) {
    ctx.session.previousScene = 'categories';
    await showEnhancedCart(ctx);
    return;
  }

  if (messageText === ctx.i18n.t('cart.checkout') || 
      messageText.includes('–û—Ñ–æ—Ä–º–∏—Ç—å')) {
    await handleCheckout(ctx);
    return;
  }
  
  // Handle category selection
  await handleCategorySelection(ctx, messageText);
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function handleCategorySelection(ctx: AuthContext, messageText: string) {
  try {
    // Show loading for category processing
    await feedbackManager.showLoading(ctx, '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');

    const language = ctx.i18n.locale();
    
    // Find selected category
    const selectedCategory = tempCategories.find(category => {
      const categoryName = getCategoryName(category, language);
      const cleanMessageText = messageText.replace(/^[üçΩÔ∏è‚úàÔ∏èüßäüç±üçóüçüüåÆüçîüå≠]\s*/, '');
      return categoryName === cleanMessageText || messageText.includes(categoryName);
    });

    await feedbackManager.hideLoading(ctx);

    if (!selectedCategory) {
      await feedbackManager.showWarning(
        ctx,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ'
      );
      return;
    }

    // Store selected category in session
    if (!ctx.session) {
      ctx.session = {
        language: 'en',
        registered: false,
        phone: null,
        currentCity: null,
        selectedCity: null
      };
    }
    
    (ctx.session as any).selectedCategory = selectedCategory;
    
    // Show success message and navigate to products
    await feedbackManager.showSuccess(
      ctx,
      `–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCategoryName(selectedCategory, language)}`,
      '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–æ–≤–∞—Ä–∞–º...'
    );
    
    // Navigate to products scene
    setTimeout(async () => {
      await ctx.scene.enter('products');
    }, 1000);
    
  } catch (error) {
    await handleErrorWithFeedback(ctx, error, 'category selection');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
 */
async function handleClearCart(ctx: AuthContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await feedbackManager.showError(ctx, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    // Show confirmation dialog
    await feedbackManager.showConfirmation(
      ctx,
      '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?\n\n–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.',
      '‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å',
      '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'
    );
    
  } catch (error) {
    await handleErrorWithFeedback(ctx, error, 'cart clearing');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
 */
async function handleCheckout(ctx: AuthContext) {
  try {
    await feedbackManager.showLoading(ctx, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
    
    // Simulate checkout preparation
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await feedbackManager.hideLoading(ctx, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞');
    
    setTimeout(async () => {
      await ctx.scene.enter('checkout');
    }, 500);
    
  } catch (error) {
    await handleErrorWithFeedback(ctx, error, 'checkout preparation');
  }
}

/**
 * –ü–æ–∫–∞–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
 */
async function showEnhancedCart(ctx: AuthContext) {
  try {
    await feedbackManager.showLoading(ctx, '–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...');
    
    const userId = ctx.from?.id;
    if (!userId) {
      await feedbackManager.hideLoading(ctx);
      await feedbackManager.showError(ctx, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    // Get cart from session or create empty
    const cart = (ctx.session as any)?.cart || { items: [], total: 0 };
    
    await feedbackManager.hideLoading(ctx);

    if (cart.items.length === 0) {
      await feedbackManager.showInfo(
        ctx,
        '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
        '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
      );
      return;
    }

    // Format cart items
    const cartText = cart.items.map((item: any, index: number) => 
      `${index + 1}. ${item.name}\n   –¶–µ–Ω–∞: ${item.price} —Å—É–º\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}`
    ).join('\n\n');

    const message = `üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n${cartText}\n\nüí∞ <b>–ò—Ç–æ–≥–æ: ${cart.total} —Å—É–º</b>`;

    const keyboard = Markup.keyboard([
      ['‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'],
      ['üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', '‚Üê –ù–∞–∑–∞–¥']
    ]).resize();

    await ctx.replyWithHTML(message, keyboard);
    
  } catch (error) {
    await handleErrorWithFeedback(ctx, error, 'cart display');
  }
}

// Handle confirmation callbacks
enhancedCategoriesScene.action('confirm_yes', async (ctx) => {
  await ctx.answerCbQuery();
  
  const userId = ctx.from?.id;
  if (userId) {
    // Clear cart
    if (ctx.session) {
      (ctx.session as any).cart = { items: [], total: 0, updatedAt: new Date().toISOString() };
    }
    
    await feedbackManager.showSuccess(ctx, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    await showEnhancedCart(ctx);
  }
});

enhancedCategoriesScene.action('confirm_no', async (ctx) => {
  await ctx.answerCbQuery();
  await feedbackManager.showInfo(ctx, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
});

// Handle help command
enhancedCategoriesScene.command('help', async (ctx) => {
  await feedbackManager.showInfo(
    ctx,
    '–ü–æ–º–æ—â—å - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n\n' +
    'üõí - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã\n' +
    '‚Üê –ù–∞–∑–∞–¥ - –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
  );
});

export { enhancedCategoriesScene }; 